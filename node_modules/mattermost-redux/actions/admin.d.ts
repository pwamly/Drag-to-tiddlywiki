import { ActionFunc, DispatchFunc } from "../types/actions";
import { Compliance } from "../types/compliance";
import { GroupSearchOpts } from "../types/groups";
export declare function getLogs(page?: number, perPage?: number): ActionFunc;
export declare function getAudits(page?: number, perPage?: number): ActionFunc;
export declare function getConfig(): ActionFunc;
export declare function updateConfig(config: Record<string, any>): ActionFunc;
export declare function reloadConfig(): ActionFunc;
export declare function getEnvironmentConfig(): ActionFunc;
export declare function testEmail(config: any): ActionFunc;
export declare function testSiteURL(siteURL: string): ActionFunc;
export declare function testS3Connection(config: any): ActionFunc;
export declare function invalidateCaches(): ActionFunc;
export declare function recycleDatabase(): ActionFunc;
export declare function createComplianceReport(job: Partial<Compliance>): ActionFunc;
export declare function getComplianceReport(reportId: string): ActionFunc;
export declare function getComplianceReports(page?: number, perPage?: number): ActionFunc;
export declare function uploadBrandImage(imageData: File): ActionFunc;
export declare function deleteBrandImage(): ActionFunc;
export declare function getClusterStatus(): ActionFunc;
export declare function testLdap(): ActionFunc;
export declare function syncLdap(): ActionFunc;
export declare function getLdapGroups(page?: number, perPage?: number, opts?: GroupSearchOpts): ActionFunc;
export declare function linkLdapGroup(key: string): ActionFunc;
export declare function unlinkLdapGroup(key: string): ActionFunc;
export declare function getSamlCertificateStatus(): ActionFunc;
export declare function uploadPublicSamlCertificate(fileData: File): ActionFunc;
export declare function uploadPrivateSamlCertificate(fileData: File): ActionFunc;
export declare function uploadPublicLdapCertificate(fileData: File): ActionFunc;
export declare function uploadPrivateLdapCertificate(fileData: File): ActionFunc;
export declare function uploadIdpSamlCertificate(fileData: File): ActionFunc;
export declare function removePublicSamlCertificate(): ActionFunc;
export declare function removePrivateSamlCertificate(): ActionFunc;
export declare function removePublicLdapCertificate(): ActionFunc;
export declare function removePrivateLdapCertificate(): ActionFunc;
export declare function removeIdpSamlCertificate(): ActionFunc;
export declare function testElasticsearch(config: any): ActionFunc;
export declare function purgeElasticsearchIndexes(): ActionFunc;
export declare function uploadLicense(fileData: File): ActionFunc;
export declare function removeLicense(): ActionFunc;
export declare function getAnalytics(name: string, teamId?: string): ActionFunc;
export declare function getStandardAnalytics(teamId?: string): ActionFunc;
export declare function getAdvancedAnalytics(teamId?: string): ActionFunc;
export declare function getPostsPerDayAnalytics(teamId?: string): ActionFunc;
export declare function getBotPostsPerDayAnalytics(teamId?: string): ActionFunc;
export declare function getUsersPerDayAnalytics(teamId?: string): ActionFunc;
export declare function uploadPlugin(fileData: File, force?: boolean): ActionFunc;
export declare function installPluginFromUrl(url: string, force?: boolean): ActionFunc;
export declare function getPlugins(): ActionFunc;
export declare function getPluginStatuses(): ActionFunc;
export declare function removePlugin(pluginId: string): ActionFunc;
export declare function enablePlugin(pluginId: string): ActionFunc;
export declare function disablePlugin(pluginId: string): ActionFunc;
export declare function getSamlMetadataFromIdp(samlMetadataURL: string): ActionFunc;
export declare function setSamlIdpCertificateFromMetadata(certData: string): ActionFunc;
export declare function sendWarnMetricAck(warnMetricId: string, forceAck: boolean): (dispatch: DispatchFunc) => Promise<{
    data: boolean;
    error?: undefined;
} | {
    error: any;
    data?: undefined;
}>;
