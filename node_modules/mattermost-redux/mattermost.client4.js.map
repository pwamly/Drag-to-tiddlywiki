{"version":3,"file":"mattermost.client4.js","sources":["node_modules/tslib/tslib.es6.js","src/constants/general.ts","src/utils/key_mirror.ts","src/constants/stats.ts","src/constants/permissions.ts","src/constants/groups.ts","node_modules/reselect/es/index.js","node_modules/shallow-equals/index.js","src/utils/helpers.ts","src/utils/user_utils.ts","src/client/fetch_etag.ts","src/client/client4.ts","src/utils/sentry.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nexport default {\n    CONFIG_CHANGED: 'config_changed',\n    SERVER_VERSION_CHANGED: 'server_version_changed',\n    PAGE_SIZE_DEFAULT: 60,\n    PAGE_SIZE_MAXIMUM: 200,\n    LOGS_PAGE_SIZE_DEFAULT: 10000,\n    AUDITS_CHUNK_SIZE: 100,\n    PROFILE_CHUNK_SIZE: 100,\n    CHANNELS_CHUNK_SIZE: 50,\n    TEAMS_CHUNK_SIZE: 50,\n    JOBS_CHUNK_SIZE: 50,\n    SEARCH_TIMEOUT_MILLISECONDS: 100,\n    STATUS_INTERVAL: 60000,\n    AUTOCOMPLETE_LIMIT_DEFAULT: 25,\n    AUTOCOMPLETE_SPLIT_CHARACTERS: ['.', '-', '_'],\n    OUT_OF_OFFICE: 'ooo',\n    OFFLINE: 'offline',\n    AWAY: 'away',\n    ONLINE: 'online',\n    DND: 'dnd',\n    PERMISSIONS_ALL: 'all',\n    PERMISSIONS_CHANNEL_ADMIN: 'channel_admin',\n    PERMISSIONS_TEAM_ADMIN: 'team_admin',\n    PERMISSIONS_SYSTEM_ADMIN: 'system_admin',\n    TEAM_GUEST_ROLE: 'team_guest',\n    TEAM_USER_ROLE: 'team_user',\n    TEAM_ADMIN_ROLE: 'team_admin',\n    CHANNEL_GUEST_ROLE: 'channel_guest',\n    CHANNEL_USER_ROLE: 'channel_user',\n    CHANNEL_ADMIN_ROLE: 'channel_admin',\n    SYSTEM_GUEST_ROLE: 'system_guest',\n    SYSTEM_USER_ROLE: 'system_user',\n    SYSTEM_ADMIN_ROLE: 'system_admin',\n    SYSTEM_USER_MANAGER_ROLE: 'system_user_manager',\n    SYSTEM_READ_ONLY_ADMIN_ROLE: 'system_read_only_admin',\n    SYSTEM_MANAGER_ROLE: 'system_manager',\n    SYSTEM_USER_ACCESS_TOKEN_ROLE: 'system_user_access_token',\n    SYSTEM_POST_ALL_ROLE: 'system_post_all',\n    SYSTEM_POST_ALL_PUBLIC_ROLE: 'system_post_all_public',\n    ALLOW_EDIT_POST_ALWAYS: 'always',\n    ALLOW_EDIT_POST_NEVER: 'never',\n    ALLOW_EDIT_POST_TIME_LIMIT: 'time_limit',\n    DEFAULT_POST_EDIT_TIME_LIMIT: 300,\n    RESTRICT_DIRECT_MESSAGE_ANY: 'any',\n    RESTRICT_DIRECT_MESSAGE_TEAM: 'team',\n    SWITCH_TO_DEFAULT_CHANNEL: 'switch_to_default_channel',\n    DEFAULT_CHANNEL: 'town-square',\n    DM_CHANNEL: 'D',\n    OPEN_CHANNEL: 'O',\n    PRIVATE_CHANNEL: 'P',\n    GM_CHANNEL: 'G',\n    PUSH_NOTIFY_APPLE_REACT_NATIVE: 'apple_rn',\n    PUSH_NOTIFY_ANDROID_REACT_NATIVE: 'android_rn',\n    STORE_REHYDRATION_COMPLETE: 'store_hydation_complete',\n    OFFLINE_STORE_RESET: 'offline_store_reset',\n    OFFLINE_STORE_PURGE: 'offline_store_purge',\n    TEAMMATE_NAME_DISPLAY: {\n        SHOW_USERNAME: 'username',\n        SHOW_NICKNAME_FULLNAME: 'nickname_full_name',\n        SHOW_FULLNAME: 'full_name',\n    },\n    SPECIAL_MENTIONS: ['all', 'channel', 'here'],\n    MAX_USERS_IN_GM: 8,\n    MIN_USERS_IN_GM: 3,\n    MAX_GROUP_CHANNELS_FOR_PROFILES: 50,\n    DEFAULT_LOCALE: 'en',\n    DEFAULT_AUTOLINKED_URL_SCHEMES: ['http', 'https', 'ftp', 'mailto', 'tel', 'mattermost'],\n    DISABLED: 'disabled',\n    DEFAULT_ON: 'default_on',\n    DEFAULT_OFF: 'default_off',\n    ALWAYS_ON: 'always_on',\n    DEFAULT_GROUP: 'board',\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n/* eslint-disable header/header */\n\n/**\n * Constructs an enumeration with keys equal to their value.\n *\n * For example:\n *\n *   var COLORS = keyMirror({blue: null, red: null});\n *   var myColor = COLORS.blue;\n *   var isColorValid = !!COLORS[myColor];\n *\n * The last line could not be performed if the values of the generated enum were\n * not equal to their keys.\n *\n *   Input:  {key1: val1, key2: val2}\n *   Output: {key1: key1, key2: key2}\n *\n * @param {object} obj\n * @return {object}\n */\nexport default function keyMirror<T extends Record<string, unknown>>(obj: T): { [K in keyof T]: K } {\n    if (!(obj instanceof Object && !Array.isArray(obj))) {\n        throw new Error('keyMirror(...): Argument must be an object.');\n    }\n\n    const ret: any = {};\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key)) {\n            continue;\n        }\n\n        ret[key] = key;\n    }\n    return ret;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport keyMirror from 'utils/key_mirror';\n\nexport default keyMirror({\n    TOTAL_USERS: null,\n    TOTAL_INACTIVE_USERS: null,\n    TOTAL_PUBLIC_CHANNELS: null,\n    TOTAL_PRIVATE_GROUPS: null,\n    TOTAL_POSTS: null,\n    TOTAL_TEAMS: null,\n    TOTAL_FILE_POSTS: null,\n    TOTAL_HASHTAG_POSTS: null,\n    TOTAL_IHOOKS: null,\n    TOTAL_OHOOKS: null,\n    TOTAL_COMMANDS: null,\n    TOTAL_SESSIONS: null,\n    POST_PER_DAY: null,\n    BOT_POST_PER_DAY: null,\n    USERS_WITH_POSTS_PER_DAY: null,\n    RECENTLY_ACTIVE_USERS: null,\n    NEWLY_CREATED_USERS: null,\n    TOTAL_WEBSOCKET_CONNECTIONS: null,\n    TOTAL_MASTER_DB_CONNECTIONS: null,\n    TOTAL_READ_DB_CONNECTIONS: null,\n    DAILY_ACTIVE_USERS: null,\n    MONTHLY_ACTIVE_USERS: null,\n    REGISTERED_USERS: null,\n});\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nconst values = {\n    INVITE_USER: 'invite_user',\n    ADD_USER_TO_TEAM: 'add_user_to_team',\n    USE_SLASH_COMMANDS: 'use_slash_commands',\n    MANAGE_SLASH_COMMANDS: 'manage_slash_commands',\n    MANAGE_OTHERS_SLASH_COMMANDS: 'manage_others_slash_commands',\n    CREATE_PUBLIC_CHANNEL: 'create_public_channel',\n    CREATE_PRIVATE_CHANNEL: 'create_private_channel',\n    MANAGE_PUBLIC_CHANNEL_MEMBERS: 'manage_public_channel_members',\n    MANAGE_PRIVATE_CHANNEL_MEMBERS: 'manage_private_channel_members',\n    READ_PUBLIC_CHANNEL_GROUPS: 'read_public_channel_groups',\n    READ_PRIVATE_CHANNEL_GROUPS: 'read_private_channel_groups',\n    ASSIGN_SYSTEM_ADMIN_ROLE: 'assign_system_admin_role',\n    MANAGE_ROLES: 'manage_roles',\n    MANAGE_TEAM_ROLES: 'manage_team_roles',\n    MANAGE_CHANNEL_ROLES: 'manage_channel_roles',\n    MANAGE_SYSTEM: 'manage_system',\n    CREATE_DIRECT_CHANNEL: 'create_direct_channel',\n    CREATE_GROUP_CHANNEL: 'create_group_channel',\n    MANAGE_PUBLIC_CHANNEL_PROPERTIES: 'manage_public_channel_properties',\n    MANAGE_PRIVATE_CHANNEL_PROPERTIES: 'manage_private_channel_properties',\n    LIST_PUBLIC_TEAMS: 'list_public_teams',\n    JOIN_PUBLIC_TEAMS: 'join_public_teams',\n    LIST_PRIVATE_TEAMS: 'list_private_teams',\n    JOIN_PRIVATE_TEAMS: 'join_private_teams',\n    LIST_TEAM_CHANNELS: 'list_team_channels',\n    JOIN_PUBLIC_CHANNELS: 'join_public_channels',\n    DELETE_PUBLIC_CHANNEL: 'delete_public_channel',\n    CONVERT_PUBLIC_CHANNEL_TO_PRIVATE: 'convert_public_channel_to_private',\n    CONVERT_PRIVATE_CHANNEL_TO_PUBLIC: 'convert_private_channel_to_public',\n    DELETE_PRIVATE_CHANNEL: 'delete_private_channel',\n    EDIT_OTHER_USERS: 'edit_other_users',\n    READ_CHANNEL: 'read_channel',\n    READ_PUBLIC_CHANNEL: 'read_public_channel',\n    ADD_REACTION: 'add_reaction',\n    REMOVE_REACTION: 'remove_reaction',\n    REMOVE_OTHERS_REACTIONS: 'remove_others_reactions',\n    PERMANENT_DELETE_USER: 'permanent_delete_user',\n    UPLOAD_FILE: 'upload_file',\n    GET_PUBLIC_LINK: 'get_public_link',\n    MANAGE_WEBHOOKS: 'manage_webhooks',\n    MANAGE_OTHERS_WEBHOOKS: 'manage_others_webhooks',\n    MANAGE_INCOMING_WEBHOOKS: 'manage_incoming_webhooks',\n    MANAGE_OTHERS_INCOMING_WEBHOOKS: 'manage_others_incoming_webhooks',\n    MANAGE_OUTGOING_WEBHOOKS: 'manage_outgoing_webhooks',\n    MANAGE_OTHERS_OUTGOING_WEBHOOKS: 'manage_others_outgoing_webhooks',\n    MANAGE_OAUTH: 'manage_oauth',\n    MANAGE_SYSTEM_WIDE_OAUTH: 'manage_system_wide_oauth',\n    CREATE_POST: 'create_post',\n    CREATE_POST_PUBLIC: 'create_post_public',\n    EDIT_POST: 'edit_post',\n    EDIT_OTHERS_POSTS: 'edit_others_posts',\n    DELETE_POST: 'delete_post',\n    DELETE_OTHERS_POSTS: 'delete_others_posts',\n    REMOVE_USER_FROM_TEAM: 'remove_user_from_team',\n    CREATE_TEAM: 'create_team',\n    MANAGE_TEAM: 'manage_team',\n    IMPORT_TEAM: 'import_team',\n    VIEW_TEAM: 'view_team',\n    LIST_USERS_WITHOUT_TEAM: 'list_users_without_team',\n    CREATE_USER_ACCESS_TOKEN: 'create_user_access_token',\n    READ_USER_ACCESS_TOKEN: 'read_user_access_token',\n    REVOKE_USER_ACCESS_TOKEN: 'revoke_user_access_token',\n    MANAGE_JOBS: 'manage_jobs',\n    MANAGE_EMOJIS: 'manage_emojis',\n    MANAGE_OTHERS_EMOJIS: 'manage_others_emojis',\n    CREATE_EMOJIS: 'create_emojis',\n    DELETE_EMOJIS: 'delete_emojis',\n    DELETE_OTHERS_EMOJIS: 'delete_others_emojis',\n    VIEW_MEMBERS: 'view_members',\n    INVITE_GUEST: 'invite_guest',\n    PROMOTE_GUEST: 'promote_guest',\n    DEMOTE_TO_GUEST: 'demote_to_guest',\n    USE_CHANNEL_MENTIONS: 'use_channel_mentions',\n    USE_GROUP_MENTIONS: 'use_group_mentions',\n    READ_OTHER_USERS_TEAMS: 'read_other_users_teams',\n    EDIT_BRAND: 'edit_brand',\n    READ_JOBS: 'read_jobs',\n    DOWNLOAD_COMPLIANCE_EXPORT_RESULT: 'download_compliance_export_result',\n\n    SYSCONSOLE_READ_ABOUT: 'sysconsole_read_about',\n    SYSCONSOLE_WRITE_ABOUT: 'sysconsole_write_about',\n    SYSCONSOLE_READ_BILLING: 'sysconsole_read_billing',\n    SYSCONSOLE_WRITE_BILLING: 'sysconsole_write_billing',\n    SYSCONSOLE_READ_REPORTING: 'sysconsole_read_reporting',\n    SYSCONSOLE_WRITE_REPORTING: 'sysconsole_write_reporting',\n    SYSCONSOLE_READ_USERMANAGEMENT_USERS: 'sysconsole_read_user_management_users',\n    SYSCONSOLE_WRITE_USERMANAGEMENT_USERS: 'sysconsole_write_user_management_users',\n    SYSCONSOLE_READ_USERMANAGEMENT_GROUPS: 'sysconsole_read_user_management_groups',\n    SYSCONSOLE_WRITE_USERMANAGEMENT_GROUPS: 'sysconsole_write_user_management_groups',\n    SYSCONSOLE_READ_USERMANAGEMENT_TEAMS: 'sysconsole_read_user_management_teams',\n    SYSCONSOLE_WRITE_USERMANAGEMENT_TEAMS: 'sysconsole_write_user_management_teams',\n    SYSCONSOLE_READ_USERMANAGEMENT_CHANNELS: 'sysconsole_read_user_management_channels',\n    SYSCONSOLE_WRITE_USERMANAGEMENT_CHANNELS: 'sysconsole_write_user_management_channels',\n    SYSCONSOLE_READ_USERMANAGEMENT_PERMISSIONS: 'sysconsole_read_user_management_permissions',\n    SYSCONSOLE_WRITE_USERMANAGEMENT_PERMISSIONS: 'sysconsole_write_user_management_permissions',\n    SYSCONSOLE_READ_USERMANAGEMENT_SYSTEM_ROLES: 'sysconsole_read_user_management_system_roles',\n    SYSCONSOLE_WRITE_USERMANAGEMENT_SYSTEM_ROLES: 'sysconsole_write_user_management_system_roles',\n    SYSCONSOLE_READ_ENVIRONMENT: 'sysconsole_read_environment',\n    SYSCONSOLE_WRITE_ENVIRONMENT: 'sysconsole_write_environment',\n    SYSCONSOLE_READ_SITE: 'sysconsole_read_site',\n    SYSCONSOLE_WRITE_SITE: 'sysconsole_write_site',\n    SYSCONSOLE_READ_AUTHENTICATION: 'sysconsole_read_authentication',\n    SYSCONSOLE_WRITE_AUTHENTICATION: 'sysconsole_write_authentication',\n    SYSCONSOLE_READ_PLUGINS: 'sysconsole_read_plugins',\n    SYSCONSOLE_WRITE_PLUGINS: 'sysconsole_write_plugins',\n    SYSCONSOLE_READ_INTEGRATIONS: 'sysconsole_read_integrations',\n    SYSCONSOLE_WRITE_INTEGRATIONS: 'sysconsole_write_integrations',\n    SYSCONSOLE_READ_COMPLIANCE: 'sysconsole_read_compliance',\n    SYSCONSOLE_WRITE_COMPLIANCE: 'sysconsole_write_compliance',\n    SYSCONSOLE_READ_EXPERIMENTAL: 'sysconsole_read_experimental',\n    SYSCONSOLE_WRITE_EXPERIMENTAL: 'sysconsole_write_experimental',\n\n    CHANNEL_MODERATED_PERMISSIONS: {\n        CREATE_POST: 'create_post',\n        CREATE_REACTIONS: 'create_reactions',\n        MANAGE_MEMBERS: 'manage_members',\n        USE_CHANNEL_MENTIONS: 'use_channel_mentions',\n    },\n    MANAGE_BOTS: 'manage_bots',\n    MANAGE_OTHERS_BOTS: 'manage_others_bots',\n    SYSCONSOLE_READ_PERMISSIONS: [] as string[],\n    SYSCONSOLE_WRITE_PERMISSIONS: [] as string[],\n    MANAGE_SHARED_CHANNELS: 'manage_shared_channels',\n    MANAGE_REMOTE_CLUSTERS: 'manage_remote_clusters',\n    SYSCONSOLE_ANCILLARY_PERMISSIONS: {} as Record<string, string[]>,\n};\n\nvalues.SYSCONSOLE_READ_PERMISSIONS = [\n    values.SYSCONSOLE_READ_ABOUT,\n    values.SYSCONSOLE_READ_BILLING,\n    values.SYSCONSOLE_READ_REPORTING,\n    values.SYSCONSOLE_READ_USERMANAGEMENT_USERS,\n    values.SYSCONSOLE_READ_USERMANAGEMENT_GROUPS,\n    values.SYSCONSOLE_READ_USERMANAGEMENT_TEAMS,\n    values.SYSCONSOLE_READ_USERMANAGEMENT_CHANNELS,\n    values.SYSCONSOLE_READ_USERMANAGEMENT_PERMISSIONS,\n    values.SYSCONSOLE_READ_ENVIRONMENT,\n    values.SYSCONSOLE_READ_SITE,\n    values.SYSCONSOLE_READ_AUTHENTICATION,\n    values.SYSCONSOLE_READ_PLUGINS,\n    values.SYSCONSOLE_READ_INTEGRATIONS,\n    values.SYSCONSOLE_READ_COMPLIANCE,\n    values.SYSCONSOLE_READ_EXPERIMENTAL,\n];\n\nvalues.SYSCONSOLE_WRITE_PERMISSIONS = [\n    values.SYSCONSOLE_WRITE_ABOUT,\n    values.SYSCONSOLE_WRITE_BILLING,\n    values.SYSCONSOLE_WRITE_REPORTING,\n    values.SYSCONSOLE_WRITE_USERMANAGEMENT_USERS,\n    values.SYSCONSOLE_WRITE_USERMANAGEMENT_GROUPS,\n    values.SYSCONSOLE_WRITE_USERMANAGEMENT_TEAMS,\n    values.SYSCONSOLE_WRITE_USERMANAGEMENT_CHANNELS,\n    values.SYSCONSOLE_WRITE_USERMANAGEMENT_PERMISSIONS,\n    values.SYSCONSOLE_WRITE_ENVIRONMENT,\n    values.SYSCONSOLE_WRITE_SITE,\n    values.SYSCONSOLE_WRITE_AUTHENTICATION,\n    values.SYSCONSOLE_WRITE_PLUGINS,\n    values.SYSCONSOLE_WRITE_INTEGRATIONS,\n    values.SYSCONSOLE_WRITE_COMPLIANCE,\n    values.SYSCONSOLE_WRITE_EXPERIMENTAL,\n];\n\nvalues.SYSCONSOLE_ANCILLARY_PERMISSIONS = {\n    [values.SYSCONSOLE_READ_USERMANAGEMENT_CHANNELS]: [\n        values.READ_PUBLIC_CHANNEL,\n        values.READ_CHANNEL,\n        values.READ_PUBLIC_CHANNEL_GROUPS,\n        values.READ_PRIVATE_CHANNEL_GROUPS,\n    ],\n    [values.SYSCONSOLE_READ_USERMANAGEMENT_USERS]: [\n        values.READ_OTHER_USERS_TEAMS,\n    ],\n    [values.SYSCONSOLE_READ_USERMANAGEMENT_TEAMS]: [\n        values.LIST_PRIVATE_TEAMS,\n        values.LIST_PUBLIC_TEAMS,\n        values.VIEW_TEAM,\n    ],\n    [values.SYSCONSOLE_WRITE_COMPLIANCE]: [\n        values.MANAGE_JOBS,\n    ],\n    [values.SYSCONSOLE_READ_COMPLIANCE]: [\n        values.READ_JOBS,\n        values.DOWNLOAD_COMPLIANCE_EXPORT_RESULT,\n    ],\n    [values.SYSCONSOLE_READ_ENVIRONMENT]: [\n        values.READ_JOBS,\n    ],\n    [values.SYSCONSOLE_READ_AUTHENTICATION]: [\n        values.READ_JOBS,\n    ],\n    [values.SYSCONSOLE_READ_REPORTING]: [\n        values.VIEW_TEAM,\n    ],\n    [values.SYSCONSOLE_WRITE_USERMANAGEMENT_USERS]: [\n        values.EDIT_OTHER_USERS,\n        values.DEMOTE_TO_GUEST,\n        values.PROMOTE_GUEST,\n    ],\n    [values.SYSCONSOLE_WRITE_USERMANAGEMENT_CHANNELS]: [\n        values.MANAGE_TEAM,\n        values.MANAGE_PUBLIC_CHANNEL_PROPERTIES,\n        values.MANAGE_PRIVATE_CHANNEL_PROPERTIES,\n        values.MANAGE_PRIVATE_CHANNEL_MEMBERS,\n        values.MANAGE_PUBLIC_CHANNEL_MEMBERS,\n        values.DELETE_PRIVATE_CHANNEL,\n        values.DELETE_PUBLIC_CHANNEL,\n        values.MANAGE_CHANNEL_ROLES,\n        values.CONVERT_PUBLIC_CHANNEL_TO_PRIVATE,\n        values.CONVERT_PRIVATE_CHANNEL_TO_PUBLIC,\n    ],\n    [values.SYSCONSOLE_WRITE_USERMANAGEMENT_TEAMS]: [\n        values.MANAGE_TEAM,\n        values.MANAGE_TEAM_ROLES,\n        values.REMOVE_USER_FROM_TEAM,\n        values.JOIN_PRIVATE_TEAMS,\n        values.JOIN_PUBLIC_TEAMS,\n        values.ADD_USER_TO_TEAM,\n    ],\n    [values.SYSCONSOLE_WRITE_USERMANAGEMENT_GROUPS]: [\n        values.MANAGE_TEAM,\n        values.MANAGE_PRIVATE_CHANNEL_MEMBERS,\n        values.MANAGE_PUBLIC_CHANNEL_MEMBERS,\n        values.CONVERT_PUBLIC_CHANNEL_TO_PRIVATE,\n        values.CONVERT_PRIVATE_CHANNEL_TO_PUBLIC,\n    ],\n    [values.SYSCONSOLE_WRITE_ENVIRONMENT]: [\n        values.MANAGE_JOBS,\n    ],\n    [values.SYSCONSOLE_WRITE_SITE]: [\n        values.EDIT_BRAND,\n    ],\n};\n\nexport default values;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nenum Groups {\n    SYNCABLE_TYPE_TEAM = 'team',\n    SYNCABLE_TYPE_CHANNEL = 'channel',\n}\n\nexport default Groups;\n","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","module.exports = shallow\n\nfunction shallow(a, b, compare) {\n  var aIsNull = a === null\n  var bIsNull = b === null\n\n  if (aIsNull !== bIsNull) return false\n\n  var aIsArray = Array.isArray(a)\n  var bIsArray = Array.isArray(b)\n\n  if (aIsArray !== bIsArray) return false\n\n  var aTypeof = typeof a\n  var bTypeof = typeof b\n\n  if (aTypeof !== bTypeof) return false\n  if (flat(aTypeof)) return compare\n    ? compare(a, b)\n    : a === b\n\n  return aIsArray\n    ? shallowArray(a, b, compare)\n    : shallowObject(a, b, compare)\n}\n\nfunction shallowArray(a, b, compare) {\n  var l = a.length\n  if (l !== b.length) return false\n\n  if (compare) {\n    for (var i = 0; i < l; i++)\n      if (!compare(a[i], b[i])) return false\n  } else {\n    for (var i = 0; i < l; i++) {\n      if (a[i] !== b[i]) return false\n    }\n  }\n\n  return true\n}\n\nfunction shallowObject(a, b, compare) {\n  var ka = 0\n  var kb = 0\n\n  if (compare) {\n    for (var key in a) {\n      if (\n        a.hasOwnProperty(key) &&\n        !compare(a[key], b[key])\n      ) return false\n\n      ka++\n    }\n  } else {\n    for (var key in a) {\n      if (\n        a.hasOwnProperty(key) &&\n        a[key] !== b[key]\n      ) return false\n\n      ka++\n    }\n  }\n\n  for (var key in b) {\n    if (b.hasOwnProperty(key)) kb++\n  }\n\n  return ka === kb\n}\n\nfunction flat(type) {\n  return (\n    type !== 'function' &&\n    type !== 'object'\n  )\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as reselect from 'reselect';\nimport shallowEqual from 'shallow-equals';\n\nimport {Dictionary} from 'types/utilities';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function memoizeResult<F extends Function>(func: F): F {\n    let lastArgs: IArguments|null = null;\n    let lastResult: any = null;\n\n    // we reference arguments instead of spreading them for performance reasons\n    return function memoizedFunc() {\n        if (!shallowEqual(lastArgs, arguments)) { //eslint-disable-line prefer-rest-params\n            //eslint-disable-line prefer-rest-params\n            // apply arguments instead of spreading for performance.\n            const result = Reflect.apply(func, null, arguments); //eslint-disable-line prefer-rest-params\n            if (!shallowEqual(lastResult, result)) {\n                lastResult = result;\n            }\n        }\n\n        lastArgs = arguments; //eslint-disable-line prefer-rest-params\n        return lastResult;\n    } as unknown as F;\n}\n\n// Use this selector when you want a shallow comparison of the arguments and you want to memoize the result\n// try and use this only when your selector returns an array of ids\nexport const createIdsSelector = reselect.createSelectorCreator(memoizeResult);\n\n// Use this selector when you want a shallow comparison of the arguments and you don't need to memoize the result\nexport const createShallowSelector = reselect.createSelectorCreator(reselect.defaultMemoize, shallowEqual as any);\n\n// isMinimumServerVersion will return true if currentVersion is equal to higher or than the\n// the provided minimum version. A non-equal major version will ignore minor and dot\n// versions, and a non-equal minor version will ignore dot version.\n// currentVersion is a string, e.g '4.6.0'\n// minMajorVersion, minMinorVersion, minDotVersion are integers\nexport const isMinimumServerVersion = (currentVersion: string, minMajorVersion = 0, minMinorVersion = 0, minDotVersion = 0): boolean => {\n    if (!currentVersion || typeof currentVersion !== 'string') {\n        return false;\n    }\n\n    const split = currentVersion.split('.');\n\n    const major = parseInt(split[0], 10);\n    const minor = parseInt(split[1] || '0', 10);\n    const dot = parseInt(split[2] || '0', 10);\n\n    if (major > minMajorVersion) {\n        return true;\n    }\n    if (major < minMajorVersion) {\n        return false;\n    }\n\n    // Major version is equal, check minor\n    if (minor > minMinorVersion) {\n        return true;\n    }\n    if (minor < minMinorVersion) {\n        return false;\n    }\n\n    // Minor version is equal, check dot\n    if (dot > minDotVersion) {\n        return true;\n    }\n    if (dot < minDotVersion) {\n        return false;\n    }\n\n    // Dot version is equal\n    return true;\n};\n\n// Generates a RFC-4122 version 4 compliant globally unique identifier.\nexport function generateId(): string {\n    // implementation taken from http://stackoverflow.com/a/2117523\n    let id = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n    id = id.replace(/[xy]/g, (c) => {\n        const r = Math.floor(Math.random() * 16);\n        let v;\n\n        if (c === 'x') {\n            v = r;\n        } else {\n            // eslint-disable-next-line no-mixed-operators\n            v = r & 0x3 | 0x8;\n        }\n\n        return v.toString(16);\n    });\n    return id;\n}\n\nexport function isEmail(email: string): boolean {\n    // writing a regex to match all valid email addresses is really, really hard. (see http://stackoverflow.com/a/201378)\n    // this regex ensures:\n    // - at least one character that is not a space, comma, or @ symbol\n    // - followed by a single @ symbol\n    // - followed by at least one character that is not a space, comma, or @ symbol\n    // this prevents <Outlook Style> outlook.style@domain.com addresses and multiple comma-separated addresses from being accepted\n    return (/^[^ ,@]+@[^ ,@]+$/).test(email);\n}\n\nexport function buildQueryString(parameters: Dictionary<any>): string {\n    const keys = Object.keys(parameters);\n    if (keys.length === 0) {\n        return '';\n    }\n\n    let query = '?';\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        query += key + '=' + encodeURIComponent(parameters[key]);\n\n        if (i < keys.length - 1) {\n            query += '&';\n        }\n    }\n\n    return query;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {General, Preferences} from '../constants';\nimport {localizeMessage} from 'utils/i18n_utils';\nimport {ChannelMembership} from 'types/channels';\nimport {TeamMembership} from 'types/teams';\nimport {UserProfile} from 'types/users';\nimport {IDMappedObjects, $ID, Dictionary} from 'types/utilities';\nexport function getFullName(user: UserProfile): string {\n    if (user.first_name && user.last_name) {\n        return user.first_name + ' ' + user.last_name;\n    } else if (user.first_name) {\n        return user.first_name;\n    } else if (user.last_name) {\n        return user.last_name;\n    }\n\n    return '';\n}\n\nexport function displayUsername(\n    user: UserProfile,\n    teammateNameDisplay: string,\n    useFallbackUsername = true,\n): string {\n    let name = useFallbackUsername ? localizeMessage('channel_loader.someone', 'Someone') : '';\n    if (user) {\n        if (teammateNameDisplay === Preferences.DISPLAY_PREFER_NICKNAME) {\n            name = user.nickname || getFullName(user);\n        } else if (teammateNameDisplay === Preferences.DISPLAY_PREFER_FULL_NAME) {\n            name = getFullName(user);\n        } else {\n            name = user.username;\n        }\n\n        if (!name || name.trim().length === 0) {\n            name = user.username;\n        }\n    }\n\n    return name;\n}\n\nexport function spaceSeparatedStringIncludes(spaceSeparated: string, item: string): boolean {\n    const items = spaceSeparated.split(' ');\n    return items.includes(item);\n}\n\nexport function isAdmin(roles: string): boolean {\n    return isSystemAdmin(roles) || isTeamAdmin(roles);\n}\n\nexport function isGuest(roles: string): boolean {\n    return spaceSeparatedStringIncludes(roles, 'system_guest');\n}\n\nexport function isTeamAdmin(roles: string): boolean {\n    return spaceSeparatedStringIncludes(roles, General.TEAM_ADMIN_ROLE);\n}\n\nexport function isSystemAdmin(roles: string): boolean {\n    return spaceSeparatedStringIncludes(roles, General.SYSTEM_ADMIN_ROLE);\n}\n\nexport function includesAnAdminRole(roles: string): boolean {\n    const rolesArray = roles.split(' ');\n    return [\n        General.SYSTEM_ADMIN_ROLE,\n        General.SYSTEM_USER_MANAGER_ROLE,\n        General.SYSTEM_READ_ONLY_ADMIN_ROLE,\n        General.SYSTEM_MANAGER_ROLE,\n    ].some((el) => rolesArray.includes(el));\n}\n\nexport function isChannelAdmin(roles: string): boolean {\n    return spaceSeparatedStringIncludes(roles, General.CHANNEL_ADMIN_ROLE);\n}\n\nexport function hasUserAccessTokenRole(roles: string): boolean {\n    return spaceSeparatedStringIncludes(roles, General.SYSTEM_USER_ACCESS_TOKEN_ROLE);\n}\n\nexport function hasPostAllRole(roles: string): boolean {\n    return spaceSeparatedStringIncludes(roles, General.SYSTEM_POST_ALL_ROLE);\n}\n\nexport function hasPostAllPublicRole(roles: string): boolean {\n    return spaceSeparatedStringIncludes(roles, General.SYSTEM_POST_ALL_PUBLIC_ROLE);\n}\n\nexport function profileListToMap(profileList: UserProfile[]): IDMappedObjects<UserProfile> {\n    const profiles: Dictionary<UserProfile> = {};\n    for (let i = 0; i < profileList.length; i++) {\n        profiles[profileList[i].id] = profileList[i];\n    }\n    return profiles;\n}\n\nexport function removeUserFromList(userId: $ID<UserProfile>, list: UserProfile[]): UserProfile[] {\n    for (let i = list.length - 1; i >= 0; i--) {\n        if (list[i].id === userId) {\n            list.splice(i, 1);\n            return list;\n        }\n    }\n\n    return list;\n}\n\n// Splits the term by a splitStr and composes a list of the parts of\n// the split concatenated with the rest, forming a set of suggesitons\n// matchable with startsWith\n//\n// E.g.: for \"one.two.three\" by \".\" it would yield\n// [\"one.two.three\", \".two.three\", \"two.three\", \".three\", \"three\"]\nexport function getSuggestionsSplitBy(term: string, splitStr: string): string[] {\n    const splitTerm = term.split(splitStr);\n    const initialSuggestions = splitTerm.map((st, i) => splitTerm.slice(i).join(splitStr));\n    let suggestions: string[] = [];\n\n    if (splitStr === ' ') {\n        suggestions = initialSuggestions;\n    } else {\n        suggestions = initialSuggestions.reduce((acc, val) => {\n            if (acc.length === 0) {\n                acc.push(val);\n            } else {\n                acc.push(splitStr + val, val);\n            }\n            return acc;\n        }, [] as string[]);\n    }\n    return suggestions;\n}\n\nexport function getSuggestionsSplitByMultiple(term: string, splitStrs: string[]): string[] {\n    const suggestions = splitStrs.reduce((acc, val) => {\n        getSuggestionsSplitBy(term, val).forEach((suggestion) => acc.add(suggestion));\n        return acc;\n    }, new Set<string>());\n\n    return [...suggestions];\n}\n\nexport function nameSuggestionsForUser(user: UserProfile): string[] {\n    const profileSuggestions: string[] = [];\n    const usernameSuggestions = getSuggestionsSplitByMultiple((user.username || '').toLowerCase(), General.AUTOCOMPLETE_SPLIT_CHARACTERS);\n    profileSuggestions.push(...usernameSuggestions);\n    const first = (user.first_name || '').toLowerCase();\n    const last = (user.last_name || '').toLowerCase();\n    const full = first + ' ' + last;\n    profileSuggestions.push(first, last, full);\n    profileSuggestions.push((user.nickname || '').toLowerCase());\n    profileSuggestions.push((user.position || '').toLowerCase());\n    const email = (user.email || '').toLowerCase();\n    profileSuggestions.push(email);\n\n    const split = email.split('@');\n    if (split.length > 1) {\n        profileSuggestions.push(split[1]);\n    }\n    return profileSuggestions;\n}\n\nexport function filterProfilesStartingWithTerm(users: UserProfile[], term: string): UserProfile[] {\n    const lowercasedTerm = term.toLowerCase();\n    let trimmedTerm = lowercasedTerm;\n    if (trimmedTerm.startsWith('@')) {\n        trimmedTerm = trimmedTerm.substr(1);\n    }\n\n    return users.filter((user: UserProfile) => {\n        if (!user) {\n            return false;\n        }\n\n        const profileSuggestions = nameSuggestionsForUser(user);\n        return profileSuggestions.filter((suggestion) => suggestion !== '').some((suggestion) => suggestion.startsWith(trimmedTerm));\n    });\n}\n\nexport function filterProfilesMatchingWithTerm(users: UserProfile[], term: string): UserProfile[] {\n    const lowercasedTerm = term.toLowerCase();\n    let trimmedTerm = lowercasedTerm;\n    if (trimmedTerm.startsWith('@')) {\n        trimmedTerm = trimmedTerm.substr(1);\n    }\n\n    return users.filter((user: UserProfile) => {\n        if (!user) {\n            return false;\n        }\n\n        const profileSuggestions = nameSuggestionsForUser(user);\n        return profileSuggestions.filter((suggestion) => suggestion !== '').some((suggestion) => suggestion.includes(trimmedTerm));\n    });\n}\n\nexport function sortByUsername(a: UserProfile, b: UserProfile): number {\n    const nameA = a.username;\n    const nameB = b.username;\n\n    return nameA.localeCompare(nameB);\n}\n\nfunction checkUserHasRole(user: UserProfile, userIsNotAdminOrGuest: boolean, membership: TeamMembership | ChannelMembership | undefined, role: string) {\n    const isSystemRole = role.includes('system');\n    return (\n        (\n\n            // If role is system user then user cannot have system admin or system guest roles\n            isSystemRole && user.roles.includes(role) && (\n                (role === General.SYSTEM_USER_ROLE && userIsNotAdminOrGuest) ||\n                role !== General.SYSTEM_USER_ROLE\n            )\n        ) || (\n\n            // If user is a system admin or a system guest then ignore team and channel memberships\n            !isSystemRole && userIsNotAdminOrGuest && (\n                (role === General.TEAM_ADMIN_ROLE && membership?.scheme_admin) ||\n                (role === General.CHANNEL_ADMIN_ROLE && membership?.scheme_admin) ||\n                (role === General.TEAM_USER_ROLE && membership?.scheme_user && !membership?.scheme_admin) ||\n                (role === General.CHANNEL_USER_ROLE && membership?.scheme_user && !membership?.scheme_admin)\n            )\n        )\n    );\n}\n\nexport function applyRolesFilters(user: UserProfile, filterRoles: string[], excludeRoles: string[], membership: TeamMembership | ChannelMembership | undefined): boolean {\n    const userIsNotAdminOrGuest = !(user.roles.includes(General.SYSTEM_ADMIN_ROLE) || user.roles.includes(General.SYSTEM_GUEST_ROLE));\n    const userHasExcludedRole = excludeRoles.some(checkUserHasRole.bind(this, user, userIsNotAdminOrGuest, membership));\n    if (userHasExcludedRole) {\n        return false;\n    }\n    return filterRoles.length === 0 || filterRoles.some(checkUserHasRole.bind(this, user, userIsNotAdminOrGuest, membership));\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Options} from 'types/client4';\n\nconst data: {[x: string]: any} = {};\nconst etags: {[x: string]: string} = {};\n\nexport default ((url: string, options: Options = {headers: {}}): Promise<Response> => {\n    url = url || options.url || ''; // eslint-disable-line no-param-reassign\n\n    if (options.method === 'GET' || !options.method) {\n        const etag = etags[url!];\n        const cachedResponse = data[`${url}${etag}`]; // ensure etag is for url\n        if (etag) {\n            options.headers!['If-None-Match'] = etag;\n        }\n\n        return fetch(url!, options).\n            then((response) => {\n                if (response.status === 304) {\n                    return cachedResponse.clone();\n                }\n\n                if (response.status === 200) {\n                    const responseEtag = response.headers.get('Etag');\n\n                    if (responseEtag) {\n                        data[`${url}${responseEtag}`] = response.clone();\n                        etags[url!] = responseEtag;\n                    }\n                }\n\n                return response;\n            });\n    }\n\n    // all other requests go straight to fetch\n    return Reflect.apply(fetch, undefined, [url, options]);\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {General} from '../constants';\n\nimport {ClusterInfo, AnalyticsRow} from 'types/admin';\nimport {Audit} from 'types/audits';\nimport {UserAutocomplete, AutocompleteSuggestion} from 'types/autocomplete';\nimport {Bot, BotPatch} from 'types/bots';\nimport {Product, Subscription, CloudCustomer, Address, CloudCustomerPatch, Invoice, SubscriptionStats} from 'types/cloud';\nimport {ChannelCategory, OrderedChannelCategories} from 'types/channel_categories';\nimport {\n    Channel,\n    ChannelMemberCountsByGroup,\n    ChannelMembership,\n    ChannelModeration,\n    ChannelModerationPatch,\n    ChannelStats,\n    ChannelsWithTotalCount,\n    ChannelUnread,\n    ChannelViewResponse,\n    ChannelWithTeamData,\n    ChannelSearchOpts,\n} from 'types/channels';\nimport {Options, StatusOK, ClientResponse} from 'types/client4';\nimport {Compliance} from 'types/compliance';\nimport {\n    ClientConfig,\n    ClientLicense,\n    DataRetentionPolicy,\n    License,\n    AdminConfig,\n    EnvironmentConfig,\n} from 'types/config';\nimport {CustomEmoji} from 'types/emojis';\nimport {ServerError} from 'types/errors';\nimport {FileInfo, FileUploadResponse} from 'types/files';\nimport {\n    Group,\n    GroupPatch,\n    GroupSyncable,\n    MixedUnlinkedGroup,\n    SyncablePatch,\n    UsersWithGroupsAndCount,\n    GroupsWithCount,\n} from 'types/groups';\nimport {PostActionResponse} from 'types/integration_actions';\nimport {\n    Command,\n    CommandArgs,\n    CommandResponse,\n    DialogSubmission,\n    IncomingWebhook,\n    OAuthApp,\n    OutgoingWebhook,\n    SubmitDialogResponse,\n} from 'types/integrations';\nimport {Job} from 'types/jobs';\nimport {MfaSecret} from 'types/mfa';\nimport {\n    ClientPluginManifest,\n    MarketplacePlugin,\n    PluginManifest,\n    PluginsResponse,\n    PluginStatus,\n} from 'types/plugins';\nimport {Post, PostList, PostSearchResults, OpenGraphMetadata} from 'types/posts';\nimport {PreferenceType} from 'types/preferences';\nimport {Reaction} from 'types/reactions';\nimport {Role} from 'types/roles';\nimport {SamlCertificateStatus, SamlMetadataResponse} from 'types/saml';\nimport {Scheme} from 'types/schemes';\nimport {Session} from 'types/sessions';\nimport {\n    GetTeamMembersOpts,\n    Team,\n    TeamInviteWithError,\n    TeamMembership,\n    TeamMemberWithError,\n    TeamStats,\n    TeamsWithCount,\n    TeamUnread,\n    TeamSearchOpts,\n} from 'types/teams';\nimport {TermsOfService} from 'types/terms_of_service';\nimport {\n    AuthChangeResponse,\n    UserAccessToken,\n    UserProfile,\n    UsersStats,\n    UserStatus,\n    GetFilteredUsersStatsOpts,\n    UserCustomStatus,\n} from 'types/users';\nimport {$ID, RelationOneToOne} from 'types/utilities';\nimport {ProductNotices} from 'types/product_notices';\n\nimport {buildQueryString, isMinimumServerVersion} from 'utils/helpers';\nimport {cleanUrlForLogging} from 'utils/sentry';\nimport {isSystemAdmin} from 'utils/user_utils';\n\nimport fetch from './fetch_etag';\nimport {TelemetryHandler} from './telemetry';\nimport {UserThreadList, UserThread} from 'types/threads';\n\nconst FormData = require('form-data');\nconst HEADER_AUTH = 'Authorization';\nconst HEADER_BEARER = 'BEARER';\nconst HEADER_REQUESTED_WITH = 'X-Requested-With';\nconst HEADER_USER_AGENT = 'User-Agent';\nconst HEADER_X_CLUSTER_ID = 'X-Cluster-Id';\nconst HEADER_X_CSRF_TOKEN = 'X-CSRF-Token';\nexport const HEADER_X_VERSION_ID = 'X-Version-Id';\nconst PER_PAGE_DEFAULT = 60;\nconst LOGS_PER_PAGE_DEFAULT = 10000;\nexport const DEFAULT_LIMIT_BEFORE = 30;\nexport const DEFAULT_LIMIT_AFTER = 30;\n/* eslint-disable no-throw-literal */\n\nexport default class Client4 {\n    logToConsole = false;\n    serverVersion = '';\n    clusterId = '';\n    token = '';\n    csrf = '';\n    url = '';\n    urlVersion = '/api/v4';\n    userAgent: string|null = null;\n    enableLogging = false;\n    defaultHeaders: {[x: string]: string} = {};\n    userId = '';\n    diagnosticId = '';\n    includeCookies = true;\n    translations = {\n        connectionError: 'There appears to be a problem with your internet connection.',\n        unknownError: 'We received an unexpected status code from the server.',\n    };\n    userRoles?: string;\n\n    telemetryHandler?: TelemetryHandler;\n\n    getUrl() {\n        return this.url;\n    }\n\n    getAbsoluteUrl(baseUrl: string) {\n        if (typeof baseUrl !== 'string' || !baseUrl.startsWith('/')) {\n            return baseUrl;\n        }\n        return this.getUrl() + baseUrl;\n    }\n\n    setUrl(url: string) {\n        this.url = url;\n    }\n\n    setUserAgent(userAgent: string) {\n        this.userAgent = userAgent;\n    }\n\n    getToken() {\n        return this.token;\n    }\n\n    setToken(token: string) {\n        this.token = token;\n    }\n\n    setCSRF(csrfToken: string) {\n        this.csrf = csrfToken;\n    }\n\n    setAcceptLanguage(locale: string) {\n        this.defaultHeaders['Accept-Language'] = locale;\n    }\n\n    setEnableLogging(enable: boolean) {\n        this.enableLogging = enable;\n    }\n\n    setIncludeCookies(include: boolean) {\n        this.includeCookies = include;\n    }\n\n    setUserId(userId: string) {\n        this.userId = userId;\n    }\n\n    setUserRoles(roles: string) {\n        this.userRoles = roles;\n    }\n\n    setDiagnosticId(diagnosticId: string) {\n        this.diagnosticId = diagnosticId;\n    }\n\n    setTelemetryHandler(telemetryHandler?: TelemetryHandler) {\n        this.telemetryHandler = telemetryHandler;\n    }\n\n    getServerVersion() {\n        return this.serverVersion;\n    }\n\n    getUrlVersion() {\n        return this.urlVersion;\n    }\n\n    getBaseRoute() {\n        return `${this.url}${this.urlVersion}`;\n    }\n\n    getUsersRoute() {\n        return `${this.getBaseRoute()}/users`;\n    }\n\n    getUserRoute(userId: string) {\n        return `${this.getUsersRoute()}/${userId}`;\n    }\n\n    getTeamsRoute() {\n        return `${this.getBaseRoute()}/teams`;\n    }\n\n    getTeamRoute(teamId: string) {\n        return `${this.getTeamsRoute()}/${teamId}`;\n    }\n\n    getTeamSchemeRoute(teamId: string) {\n        return `${this.getTeamRoute(teamId)}/scheme`;\n    }\n\n    getTeamNameRoute(teamName: string) {\n        return `${this.getTeamsRoute()}/name/${teamName}`;\n    }\n\n    getTeamMembersRoute(teamId: string) {\n        return `${this.getTeamRoute(teamId)}/members`;\n    }\n\n    getTeamMemberRoute(teamId: string, userId: string) {\n        return `${this.getTeamMembersRoute(teamId)}/${userId}`;\n    }\n\n    getChannelsRoute() {\n        return `${this.getBaseRoute()}/channels`;\n    }\n\n    getChannelRoute(channelId: string) {\n        return `${this.getChannelsRoute()}/${channelId}`;\n    }\n\n    getChannelMembersRoute(channelId: string) {\n        return `${this.getChannelRoute(channelId)}/members`;\n    }\n\n    getChannelMemberRoute(channelId: string, userId: string) {\n        return `${this.getChannelMembersRoute(channelId)}/${userId}`;\n    }\n\n    getChannelSchemeRoute(channelId: string) {\n        return `${this.getChannelRoute(channelId)}/scheme`;\n    }\n\n    getChannelCategoriesRoute(userId: string, teamId: string) {\n        return `${this.getBaseRoute()}/users/${userId}/teams/${teamId}/channels/categories`;\n    }\n\n    getPostsRoute() {\n        return `${this.getBaseRoute()}/posts`;\n    }\n\n    getPostRoute(postId: string) {\n        return `${this.getPostsRoute()}/${postId}`;\n    }\n\n    getReactionsRoute() {\n        return `${this.getBaseRoute()}/reactions`;\n    }\n\n    getCommandsRoute() {\n        return `${this.getBaseRoute()}/commands`;\n    }\n\n    getFilesRoute() {\n        return `${this.getBaseRoute()}/files`;\n    }\n\n    getFileRoute(fileId: string) {\n        return `${this.getFilesRoute()}/${fileId}`;\n    }\n\n    getPreferencesRoute(userId: string) {\n        return `${this.getUserRoute(userId)}/preferences`;\n    }\n\n    getIncomingHooksRoute() {\n        return `${this.getBaseRoute()}/hooks/incoming`;\n    }\n\n    getIncomingHookRoute(hookId: string) {\n        return `${this.getBaseRoute()}/hooks/incoming/${hookId}`;\n    }\n\n    getOutgoingHooksRoute() {\n        return `${this.getBaseRoute()}/hooks/outgoing`;\n    }\n\n    getOutgoingHookRoute(hookId: string) {\n        return `${this.getBaseRoute()}/hooks/outgoing/${hookId}`;\n    }\n\n    getOAuthRoute() {\n        return `${this.url}/oauth`;\n    }\n\n    getOAuthAppsRoute() {\n        return `${this.getBaseRoute()}/oauth/apps`;\n    }\n\n    getOAuthAppRoute(appId: string) {\n        return `${this.getOAuthAppsRoute()}/${appId}`;\n    }\n\n    getEmojisRoute() {\n        return `${this.getBaseRoute()}/emoji`;\n    }\n\n    getEmojiRoute(emojiId: string) {\n        return `${this.getEmojisRoute()}/${emojiId}`;\n    }\n\n    getBrandRoute() {\n        return `${this.getBaseRoute()}/brand`;\n    }\n\n    getBrandImageUrl(timestamp: string) {\n        return `${this.getBrandRoute()}/image?t=${timestamp}`;\n    }\n\n    getDataRetentionRoute() {\n        return `${this.getBaseRoute()}/data_retention`;\n    }\n\n    getJobsRoute() {\n        return `${this.getBaseRoute()}/jobs`;\n    }\n\n    getPluginsRoute() {\n        return `${this.getBaseRoute()}/plugins`;\n    }\n\n    getPluginRoute(pluginId: string) {\n        return `${this.getPluginsRoute()}/${pluginId}`;\n    }\n\n    getPluginsMarketplaceRoute() {\n        return `${this.getPluginsRoute()}/marketplace`;\n    }\n\n    getRolesRoute() {\n        return `${this.getBaseRoute()}/roles`;\n    }\n\n    getTimezonesRoute() {\n        return `${this.getBaseRoute()}/system/timezones`;\n    }\n\n    getSchemesRoute() {\n        return `${this.getBaseRoute()}/schemes`;\n    }\n\n    getRedirectLocationRoute() {\n        return `${this.getBaseRoute()}/redirect_location`;\n    }\n\n    getBotsRoute() {\n        return `${this.getBaseRoute()}/bots`;\n    }\n\n    getBotRoute(botUserId: string) {\n        return `${this.getBotsRoute()}/${botUserId}`;\n    }\n\n    getGroupsRoute() {\n        return `${this.getBaseRoute()}/groups`;\n    }\n\n    getGroupRoute(groupID: string) {\n        return `${this.getGroupsRoute()}/${groupID}`;\n    }\n\n    getNoticesRoute() {\n        return `${this.getBaseRoute()}/system/notices`;\n    }\n\n    getCloudRoute() {\n        return `${this.getBaseRoute()}/cloud`;\n    }\n\n    getUserThreadsRoute(userID: string, teamID: string): string {\n        return `${this.getUserRoute(userID)}/teams/${teamID}/threads`;\n    }\n\n    getUserThreadRoute(userId: string, teamId: string, threadId: string): string {\n        return `${this.getUserThreadsRoute(userId, teamId)}/${threadId}`;\n    }\n\n    getCSRFFromCookie() {\n        if (typeof document !== 'undefined' && typeof document.cookie !== 'undefined') {\n            const cookies = document.cookie.split(';');\n            for (let i = 0; i < cookies.length; i++) {\n                const cookie = cookies[i].trim();\n                if (cookie.startsWith('MMCSRF=')) {\n                    return cookie.replace('MMCSRF=', '');\n                }\n            }\n        }\n        return '';\n    }\n\n    getOptions(options: Options) {\n        const newOptions: Options = {...options};\n\n        const headers: {[x: string]: string} = {\n            [HEADER_REQUESTED_WITH]: 'XMLHttpRequest',\n            ...this.defaultHeaders,\n        };\n\n        if (this.token) {\n            headers[HEADER_AUTH] = `${HEADER_BEARER} ${this.token}`;\n        }\n\n        const csrfToken = this.csrf || this.getCSRFFromCookie();\n        if (options.method && options.method.toLowerCase() !== 'get' && csrfToken) {\n            headers[HEADER_X_CSRF_TOKEN] = csrfToken;\n        }\n\n        if (this.includeCookies) {\n            newOptions.credentials = 'include';\n        }\n\n        if (this.userAgent) {\n            headers[HEADER_USER_AGENT] = this.userAgent;\n        }\n\n        if (newOptions.headers) {\n            Object.assign(headers, newOptions.headers);\n        }\n\n        return {\n            ...newOptions,\n            headers,\n        };\n    }\n\n    // User Routes\n\n    createUser = (user: UserProfile, token: string, inviteId: string, redirect: string) => {\n        this.trackEvent('api', 'api_users_create');\n\n        const queryParams: any = {};\n\n        if (token) {\n            queryParams.t = token;\n        }\n\n        if (inviteId) {\n            queryParams.iid = inviteId;\n        }\n\n        if (redirect) {\n            queryParams.r = redirect;\n        }\n\n        return this.doFetch<UserProfile>(\n            `${this.getUsersRoute()}${buildQueryString(queryParams)}`,\n            {method: 'post', body: JSON.stringify(user)},\n        );\n    }\n\n    patchMe = (userPatch: Partial<UserProfile>) => {\n        return this.doFetch<UserProfile>(\n            `${this.getUserRoute('me')}/patch`,\n            {method: 'put', body: JSON.stringify(userPatch)},\n        );\n    }\n\n    patchUser = (userPatch: Partial<UserProfile> & {id: string}) => {\n        this.trackEvent('api', 'api_users_patch');\n\n        return this.doFetch<UserProfile>(\n            `${this.getUserRoute(userPatch.id)}/patch`,\n            {method: 'put', body: JSON.stringify(userPatch)},\n        );\n    }\n\n    updateUser = (user: UserProfile) => {\n        this.trackEvent('api', 'api_users_update');\n\n        return this.doFetch<UserProfile>(\n            `${this.getUserRoute(user.id)}`,\n            {method: 'put', body: JSON.stringify(user)},\n        );\n    }\n\n    promoteGuestToUser = (userId: string) => {\n        this.trackEvent('api', 'api_users_promote_guest_to_user');\n\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/promote`,\n            {method: 'post'},\n        );\n    }\n\n    demoteUserToGuest = (userId: string) => {\n        this.trackEvent('api', 'api_users_demote_user_to_guest');\n\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/demote`,\n            {method: 'post'},\n        );\n    }\n\n    updateUserRoles = (userId: string, roles: string) => {\n        this.trackEvent('api', 'api_users_update_roles');\n\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/roles`,\n            {method: 'put', body: JSON.stringify({roles})},\n        );\n    };\n\n    updateUserMfa = (userId: string, activate: boolean, code: string) => {\n        const body: any = {\n            activate,\n        };\n\n        if (activate) {\n            body.code = code;\n        }\n\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/mfa`,\n            {method: 'put', body: JSON.stringify(body)},\n        );\n    }\n\n    updateUserPassword = (userId: string, currentPassword: string, newPassword: string) => {\n        this.trackEvent('api', 'api_users_newpassword');\n\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/password`,\n            {method: 'put', body: JSON.stringify({current_password: currentPassword, new_password: newPassword})},\n        );\n    }\n\n    resetUserPassword = (token: string, newPassword: string) => {\n        this.trackEvent('api', 'api_users_reset_password');\n\n        return this.doFetch<StatusOK>(\n            `${this.getUsersRoute()}/password/reset`,\n            {method: 'post', body: JSON.stringify({token, new_password: newPassword})},\n        );\n    }\n\n    getKnownUsers = () => {\n        this.trackEvent('api', 'api_get_known_users');\n\n        return this.doFetch<Array<$ID<UserProfile>>>(\n            `${this.getUsersRoute()}/known`,\n            {method: 'get'},\n        );\n    }\n\n    sendPasswordResetEmail = (email: string) => {\n        this.trackEvent('api', 'api_users_send_password_reset');\n\n        return this.doFetch<StatusOK>(\n            `${this.getUsersRoute()}/password/reset/send`,\n            {method: 'post', body: JSON.stringify({email})},\n        );\n    }\n\n    updateUserActive = (userId: string, active: boolean) => {\n        this.trackEvent('api', 'api_users_update_active');\n\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/active`,\n            {method: 'put', body: JSON.stringify({active})},\n        );\n    }\n\n    uploadProfileImage = (userId: string, imageData: File) => {\n        this.trackEvent('api', 'api_users_update_profile_picture');\n\n        const formData = new FormData();\n        formData.append('image', imageData);\n        const request: any = {\n            method: 'post',\n            body: formData,\n        };\n\n        if (formData.getBoundary) {\n            request.headers = {\n                'Content-Type': `multipart/form-data; boundary=${formData.getBoundary()}`,\n            };\n        }\n\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/image`,\n            request,\n        );\n    };\n\n    setDefaultProfileImage = (userId: string) => {\n        this.trackEvent('api', 'api_users_set_default_profile_picture');\n\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/image`,\n            {method: 'delete'},\n        );\n    };\n\n    verifyUserEmail = (token: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getUsersRoute()}/email/verify`,\n            {method: 'post', body: JSON.stringify({token})},\n        );\n    }\n\n    updateMyTermsOfServiceStatus = (termsOfServiceId: string, accepted: boolean) => {\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute('me')}/terms_of_service`,\n            {method: 'post', body: JSON.stringify({termsOfServiceId, accepted})},\n        );\n    }\n\n    getTermsOfService = () => {\n        return this.doFetch<TermsOfService>(\n            `${this.getBaseRoute()}/terms_of_service`,\n            {method: 'get'},\n        );\n    }\n\n    createTermsOfService = (text: string) => {\n        return this.doFetch<TermsOfService>(\n            `${this.getBaseRoute()}/terms_of_service`,\n            {method: 'post', body: JSON.stringify({text})},\n        );\n    }\n\n    sendVerificationEmail = (email: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getUsersRoute()}/email/verify/send`,\n            {method: 'post', body: JSON.stringify({email})},\n        );\n    }\n\n    login = (loginId: string, password: string, token = '', deviceId = '', ldapOnly = false) => {\n        this.trackEvent('api', 'api_users_login');\n\n        if (ldapOnly) {\n            this.trackEvent('api', 'api_users_login_ldap');\n        }\n\n        const body: any = {\n            device_id: deviceId,\n            login_id: loginId,\n            password,\n            token,\n        };\n\n        if (ldapOnly) {\n            body.ldap_only = 'true';\n        }\n\n        return this.doFetch<UserProfile>(\n            `${this.getUsersRoute()}/login`,\n            {method: 'post', body: JSON.stringify(body)},\n        );\n    };\n\n    loginById = (id: string, password: string, token = '', deviceId = '') => {\n        this.trackEvent('api', 'api_users_login');\n        const body: any = {\n            device_id: deviceId,\n            id,\n            password,\n            token,\n        };\n\n        return this.doFetch<UserProfile>(\n            `${this.getUsersRoute()}/login`,\n            {method: 'post', body: JSON.stringify(body)},\n        );\n    };\n\n    logout = async () => {\n        this.trackEvent('api', 'api_users_logout');\n\n        const {response} = await this.doFetchWithResponse(\n            `${this.getUsersRoute()}/logout`,\n            {method: 'post'},\n        );\n\n        if (response.ok) {\n            this.token = '';\n        }\n\n        this.serverVersion = '';\n\n        return response;\n    };\n\n    getProfiles = (page = 0, perPage = PER_PAGE_DEFAULT, options = {}) => {\n        this.trackEvent('api', 'api_profiles_get');\n\n        return this.doFetch<UserProfile[]>(\n            `${this.getUsersRoute()}${buildQueryString({page, per_page: perPage, ...options})}`,\n            {method: 'get'},\n        );\n    };\n\n    getProfilesByIds = (userIds: string[], options = {}) => {\n        this.trackEvent('api', 'api_profiles_get_by_ids');\n\n        return this.doFetch<UserProfile[]>(\n            `${this.getUsersRoute()}/ids${buildQueryString(options)}`,\n            {method: 'post', body: JSON.stringify(userIds)},\n        );\n    };\n\n    getProfilesByUsernames = (usernames: string[]) => {\n        this.trackEvent('api', 'api_profiles_get_by_usernames');\n\n        return this.doFetch<UserProfile[]>(\n            `${this.getUsersRoute()}/usernames`,\n            {method: 'post', body: JSON.stringify(usernames)},\n        );\n    };\n\n    getProfilesInTeam = (teamId: string, page = 0, perPage = PER_PAGE_DEFAULT, sort = '', options = {}) => {\n        this.trackEvent('api', 'api_profiles_get_in_team', {team_id: teamId, sort});\n\n        return this.doFetch<UserProfile[]>(\n            `${this.getUsersRoute()}${buildQueryString({...options, in_team: teamId, page, per_page: perPage, sort})}`,\n            {method: 'get'},\n        );\n    };\n\n    getProfilesNotInTeam = (teamId: string, groupConstrained: boolean, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        this.trackEvent('api', 'api_profiles_get_not_in_team', {team_id: teamId, group_constrained: groupConstrained});\n\n        const queryStringObj: any = {not_in_team: teamId, page, per_page: perPage};\n        if (groupConstrained) {\n            queryStringObj.group_constrained = true;\n        }\n\n        return this.doFetch<UserProfile[]>(\n            `${this.getUsersRoute()}${buildQueryString(queryStringObj)}`,\n            {method: 'get'},\n        );\n    };\n\n    getProfilesWithoutTeam = (page = 0, perPage = PER_PAGE_DEFAULT, options = {}) => {\n        this.trackEvent('api', 'api_profiles_get_without_team');\n\n        return this.doFetch<UserProfile[]>(\n            `${this.getUsersRoute()}${buildQueryString({...options, without_team: 1, page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getProfilesInChannel = (channelId: string, page = 0, perPage = PER_PAGE_DEFAULT, sort = '', options: {active?: boolean} = {}) => {\n        this.trackEvent('api', 'api_profiles_get_in_channel', {channel_id: channelId});\n\n        const serverVersion = this.getServerVersion();\n        let queryStringObj;\n        if (isMinimumServerVersion(serverVersion, 4, 7)) {\n            queryStringObj = {in_channel: channelId, page, per_page: perPage, sort};\n        } else {\n            queryStringObj = {in_channel: channelId, page, per_page: perPage};\n        }\n        return this.doFetch<UserProfile[]>(\n            `${this.getUsersRoute()}${buildQueryString({...queryStringObj, ...options})}`,\n            {method: 'get'},\n        );\n    };\n\n    getProfilesInGroupChannels = (channelsIds: string[]) => {\n        this.trackEvent('api', 'api_profiles_get_in_group_channels', {channelsIds});\n\n        return this.doFetch<Record<string, UserProfile[]>>(\n            `${this.getUsersRoute()}/group_channels`,\n            {method: 'post', body: JSON.stringify(channelsIds)},\n        );\n    };\n\n    getProfilesNotInChannel = (teamId: string, channelId: string, groupConstrained: boolean, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        this.trackEvent('api', 'api_profiles_get_not_in_channel', {team_id: teamId, channel_id: channelId, group_constrained: groupConstrained});\n\n        const queryStringObj: any = {in_team: teamId, not_in_channel: channelId, page, per_page: perPage};\n        if (groupConstrained) {\n            queryStringObj.group_constrained = true;\n        }\n\n        return this.doFetch<UserProfile[]>(\n            `${this.getUsersRoute()}${buildQueryString(queryStringObj)}`,\n            {method: 'get'},\n        );\n    };\n\n    getProfilesInGroup = (groupId: string, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<UserProfile[]>(\n            `${this.getUsersRoute()}${buildQueryString({in_group: groupId, page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getMe = () => {\n        return this.doFetch<UserProfile>(\n            `${this.getUserRoute('me')}`,\n            {method: 'get'},\n        );\n    };\n\n    getUser = (userId: string) => {\n        return this.doFetch<UserProfile>(\n            `${this.getUserRoute(userId)}`,\n            {method: 'get'},\n        );\n    };\n\n    getUserByUsername = (username: string) => {\n        return this.doFetch<UserProfile>(\n            `${this.getUsersRoute()}/username/${username}`,\n            {method: 'get'},\n        );\n    };\n\n    getUserByEmail = (email: string) => {\n        return this.doFetch<UserProfile>(\n            `${this.getUsersRoute()}/email/${email}`,\n            {method: 'get'},\n        );\n    };\n\n    getProfilePictureUrl = (userId: string, lastPictureUpdate: number) => {\n        const params: any = {};\n\n        if (lastPictureUpdate) {\n            params._ = lastPictureUpdate;\n        }\n\n        return `${this.getUserRoute(userId)}/image${buildQueryString(params)}`;\n    };\n\n    getDefaultProfilePictureUrl = (userId: string) => {\n        return `${this.getUserRoute(userId)}/image/default`;\n    };\n\n    autocompleteUsers = (name: string, teamId: string, channelId: string, options = {\n        limit: General.AUTOCOMPLETE_LIMIT_DEFAULT,\n    }) => {\n        return this.doFetch<UserAutocomplete>(`${this.getUsersRoute()}/autocomplete${buildQueryString({\n            in_team: teamId,\n            in_channel: channelId,\n            name,\n            limit: options.limit,\n        })}`, {\n            method: 'get',\n        });\n    };\n\n    getSessions = (userId: string) => {\n        return this.doFetch<Session[]>(\n            `${this.getUserRoute(userId)}/sessions`,\n            {method: 'get'},\n        );\n    };\n\n    revokeSession = (userId: string, sessionId: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/sessions/revoke`,\n            {method: 'post', body: JSON.stringify({session_id: sessionId})},\n        );\n    };\n\n    revokeAllSessionsForUser = (userId: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/sessions/revoke/all`,\n            {method: 'post'},\n        );\n    };\n\n    revokeSessionsForAllUsers = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getUsersRoute()}/sessions/revoke/all`,\n            {method: 'post'},\n        );\n    };\n\n    getUserAudits = (userId: string, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Audit[]>(\n            `${this.getUserRoute(userId)}/audits${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    checkUserMfa = (loginId: string) => {\n        return this.doFetch<{mfa_required: boolean}>(\n            `${this.getUsersRoute()}/mfa`,\n            {method: 'post', body: JSON.stringify({login_id: loginId})},\n        );\n    };\n\n    generateMfaSecret = (userId: string) => {\n        return this.doFetch<MfaSecret>(\n            `${this.getUserRoute(userId)}/mfa/generate`,\n            {method: 'post'},\n        );\n    };\n\n    attachDevice = (deviceId: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getUsersRoute()}/sessions/device`,\n            {method: 'put', body: JSON.stringify({device_id: deviceId})},\n        );\n    };\n\n    searchUsers = (term: string, options: any) => {\n        this.trackEvent('api', 'api_search_users');\n\n        return this.doFetch<UserProfile[]>(\n            `${this.getUsersRoute()}/search`,\n            {method: 'post', body: JSON.stringify({term, ...options})},\n        );\n    };\n\n    getStatusesByIds = (userIds: string[]) => {\n        return this.doFetch<UserStatus[]>(\n            `${this.getUsersRoute()}/status/ids`,\n            {method: 'post', body: JSON.stringify(userIds)},\n        );\n    };\n\n    getStatus = (userId: string) => {\n        return this.doFetch<UserStatus>(\n            `${this.getUserRoute(userId)}/status`,\n            {method: 'get'},\n        );\n    };\n\n    updateStatus = (status: UserStatus) => {\n        return this.doFetch<UserStatus>(\n            `${this.getUserRoute(status.user_id)}/status`,\n            {method: 'put', body: JSON.stringify(status)},\n        );\n    };\n\n    updateCustomStatus = (customStatus: UserCustomStatus) => {\n        return this.doFetch(\n            `${this.getUserRoute('me')}/status/custom`,\n            {method: 'put', body: JSON.stringify(customStatus)},\n        );\n    };\n\n    unsetCustomStatus = () => {\n        return this.doFetch(\n            `${this.getUserRoute('me')}/status/custom`,\n            {method: 'delete'},\n        );\n    }\n\n    removeRecentCustomStatus = (customStatus: UserCustomStatus) => {\n        return this.doFetch(\n            `${this.getUserRoute('me')}/status/custom/recent`,\n            {method: 'delete', body: JSON.stringify(customStatus)},\n        );\n    }\n\n    switchEmailToOAuth = (service: string, email: string, password: string, mfaCode = '') => {\n        this.trackEvent('api', 'api_users_email_to_oauth');\n\n        return this.doFetch<AuthChangeResponse>(\n            `${this.getUsersRoute()}/login/switch`,\n            {method: 'post', body: JSON.stringify({current_service: 'email', new_service: service, email, password, mfa_code: mfaCode})},\n        );\n    };\n\n    switchOAuthToEmail = (currentService: string, email: string, password: string) => {\n        this.trackEvent('api', 'api_users_oauth_to_email');\n\n        return this.doFetch<AuthChangeResponse>(\n            `${this.getUsersRoute()}/login/switch`,\n            {method: 'post', body: JSON.stringify({current_service: currentService, new_service: 'email', email, new_password: password})},\n        );\n    };\n\n    switchEmailToLdap = (email: string, emailPassword: string, ldapId: string, ldapPassword: string, mfaCode = '') => {\n        this.trackEvent('api', 'api_users_email_to_ldap');\n\n        return this.doFetch<AuthChangeResponse>(\n            `${this.getUsersRoute()}/login/switch`,\n            {method: 'post', body: JSON.stringify({current_service: 'email', new_service: 'ldap', email, password: emailPassword, ldap_id: ldapId, new_password: ldapPassword, mfa_code: mfaCode})},\n        );\n    };\n\n    switchLdapToEmail = (ldapPassword: string, email: string, emailPassword: string, mfaCode = '') => {\n        this.trackEvent('api', 'api_users_ldap_to_email');\n\n        return this.doFetch<AuthChangeResponse>(\n            `${this.getUsersRoute()}/login/switch`,\n            {method: 'post', body: JSON.stringify({current_service: 'ldap', new_service: 'email', email, password: ldapPassword, new_password: emailPassword, mfa_code: mfaCode})},\n        );\n    };\n\n    getAuthorizedOAuthApps = (userId: string) => {\n        return this.doFetch<OAuthApp[]>(\n            `${this.getUserRoute(userId)}/oauth/apps/authorized`,\n            {method: 'get'},\n        );\n    }\n\n    authorizeOAuthApp = (responseType: string, clientId: string, redirectUri: string, state: string, scope: string) => {\n        return this.doFetch<void>(\n            `${this.url}/oauth/authorize`,\n            {method: 'post', body: JSON.stringify({client_id: clientId, response_type: responseType, redirect_uri: redirectUri, state, scope})},\n        );\n    }\n\n    deauthorizeOAuthApp = (clientId: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.url}/oauth/deauthorize`,\n            {method: 'post', body: JSON.stringify({client_id: clientId})},\n        );\n    }\n\n    createUserAccessToken = (userId: string, description: string) => {\n        this.trackEvent('api', 'api_users_create_access_token');\n\n        return this.doFetch<UserAccessToken>(\n            `${this.getUserRoute(userId)}/tokens`,\n            {method: 'post', body: JSON.stringify({description})},\n        );\n    }\n\n    getUserAccessToken = (tokenId: string) => {\n        return this.doFetch<UserAccessToken>(\n            `${this.getUsersRoute()}/tokens/${tokenId}`,\n            {method: 'get'},\n        );\n    }\n\n    getUserAccessTokensForUser = (userId: string, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<UserAccessToken[]>(\n            `${this.getUserRoute(userId)}/tokens${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    }\n\n    getUserAccessTokens = (page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<UserAccessToken[]>(\n            `${this.getUsersRoute()}/tokens${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    }\n\n    revokeUserAccessToken = (tokenId: string) => {\n        this.trackEvent('api', 'api_users_revoke_access_token');\n\n        return this.doFetch<StatusOK>(\n            `${this.getUsersRoute()}/tokens/revoke`,\n            {method: 'post', body: JSON.stringify({token_id: tokenId})},\n        );\n    }\n\n    disableUserAccessToken = (tokenId: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getUsersRoute()}/tokens/disable`,\n            {method: 'post', body: JSON.stringify({token_id: tokenId})},\n        );\n    }\n\n    enableUserAccessToken = (tokenId: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getUsersRoute()}/tokens/enable`,\n            {method: 'post', body: JSON.stringify({token_id: tokenId})},\n        );\n    }\n\n    // Team Routes\n\n    createTeam = (team: Team) => {\n        this.trackEvent('api', 'api_teams_create');\n\n        return this.doFetch<Team>(\n            `${this.getTeamsRoute()}`,\n            {method: 'post', body: JSON.stringify(team)},\n        );\n    };\n\n    deleteTeam = (teamId: string) => {\n        this.trackEvent('api', 'api_teams_delete');\n\n        return this.doFetch<StatusOK>(\n            `${this.getTeamRoute(teamId)}`,\n            {method: 'delete'},\n        );\n    };\n\n    updateTeam = (team: Team) => {\n        this.trackEvent('api', 'api_teams_update_name', {team_id: team.id});\n\n        return this.doFetch<Team>(\n            `${this.getTeamRoute(team.id)}`,\n            {method: 'put', body: JSON.stringify(team)},\n        );\n    };\n\n    patchTeam = (team: Partial<Team> & {id: string}) => {\n        this.trackEvent('api', 'api_teams_patch_name', {team_id: team.id});\n\n        return this.doFetch<Team>(\n            `${this.getTeamRoute(team.id)}/patch`,\n            {method: 'put', body: JSON.stringify(team)},\n        );\n    };\n\n    regenerateTeamInviteId = (teamId: string) => {\n        this.trackEvent('api', 'api_teams_regenerate_invite_id', {team_id: teamId});\n\n        return this.doFetch<Team>(\n            `${this.getTeamRoute(teamId)}/regenerate_invite_id`,\n            {method: 'post'},\n        );\n    };\n\n    updateTeamScheme = (teamId: string, schemeId: string) => {\n        const patch = {scheme_id: schemeId};\n\n        this.trackEvent('api', 'api_teams_update_scheme', {team_id: teamId, ...patch});\n\n        return this.doFetch<StatusOK>(\n            `${this.getTeamSchemeRoute(teamId)}`,\n            {method: 'put', body: JSON.stringify(patch)},\n        );\n    };\n\n    checkIfTeamExists = (teamName: string) => {\n        return this.doFetch<{exists: boolean}>(\n            `${this.getTeamNameRoute(teamName)}/exists`,\n            {method: 'get'},\n        );\n    };\n\n    getTeams = (page = 0, perPage = PER_PAGE_DEFAULT, includeTotalCount = false) => {\n        return this.doFetch<Team[] | TeamsWithCount>(\n            `${this.getTeamsRoute()}${buildQueryString({page, per_page: perPage, include_total_count: includeTotalCount})}`,\n            {method: 'get'},\n        );\n    };\n\n    searchTeams = (term: string, opts: TeamSearchOpts) => {\n        this.trackEvent('api', 'api_search_teams');\n\n        return this.doFetch<Team[] | TeamsWithCount>(\n            `${this.getTeamsRoute()}/search`,\n            {method: 'post', body: JSON.stringify({term, ...opts})},\n        );\n    };\n\n    getTeam = (teamId: string) => {\n        return this.doFetch<Team>(\n            this.getTeamRoute(teamId),\n            {method: 'get'},\n        );\n    };\n\n    getTeamByName = (teamName: string) => {\n        this.trackEvent('api', 'api_teams_get_team_by_name');\n\n        return this.doFetch<Team>(\n            this.getTeamNameRoute(teamName),\n            {method: 'get'},\n        );\n    };\n\n    getMyTeams = () => {\n        return this.doFetch<Team[]>(\n            `${this.getUserRoute('me')}/teams`,\n            {method: 'get'},\n        );\n    };\n\n    getTeamsForUser = (userId: string) => {\n        return this.doFetch<Team[]>(\n            `${this.getUserRoute(userId)}/teams`,\n            {method: 'get'},\n        );\n    };\n\n    getMyTeamMembers = () => {\n        return this.doFetch<TeamMembership[]>(\n            `${this.getUserRoute('me')}/teams/members`,\n            {method: 'get'},\n        );\n    };\n\n    getMyTeamUnreads = () => {\n        return this.doFetch<TeamUnread[]>(\n            `${this.getUserRoute('me')}/teams/unread`,\n            {method: 'get'},\n        );\n    };\n\n    getTeamMembers = (teamId: string, page = 0, perPage = PER_PAGE_DEFAULT, options: GetTeamMembersOpts) => {\n        return this.doFetch<TeamMembership>(\n            `${this.getTeamMembersRoute(teamId)}${buildQueryString({page, per_page: perPage, ...options})}`,\n            {method: 'get'},\n        );\n    };\n\n    getTeamMembersForUser = (userId: string) => {\n        return this.doFetch<TeamMembership[]>(\n            `${this.getUserRoute(userId)}/teams/members`,\n            {method: 'get'},\n        );\n    };\n\n    getTeamMember = (teamId: string, userId: string) => {\n        return this.doFetch<TeamMembership>(\n            `${this.getTeamMemberRoute(teamId, userId)}`,\n            {method: 'get'},\n        );\n    };\n\n    getTeamMembersByIds = (teamId: string, userIds: string[]) => {\n        return this.doFetch<TeamMembership[]>(\n            `${this.getTeamMembersRoute(teamId)}/ids`,\n            {method: 'post', body: JSON.stringify(userIds)},\n        );\n    };\n\n    addToTeam = (teamId: string, userId: string) => {\n        this.trackEvent('api', 'api_teams_invite_members', {team_id: teamId});\n\n        const member = {user_id: userId, team_id: teamId};\n        return this.doFetch<TeamMembership>(\n            `${this.getTeamMembersRoute(teamId)}`,\n            {method: 'post', body: JSON.stringify(member)},\n        );\n    };\n\n    addToTeamFromInvite = (token = '', inviteId = '') => {\n        this.trackEvent('api', 'api_teams_invite_members');\n\n        const query = buildQueryString({token, invite_id: inviteId});\n        return this.doFetch<TeamMembership>(\n            `${this.getTeamsRoute()}/members/invite${query}`,\n            {method: 'post'},\n        );\n    };\n\n    addUsersToTeam = (teamId: string, userIds: string[]) => {\n        this.trackEvent('api', 'api_teams_batch_add_members', {team_id: teamId, count: userIds.length});\n\n        const members: any = [];\n        userIds.forEach((id) => members.push({team_id: teamId, user_id: id}));\n        return this.doFetch<TeamMembership[]>(\n            `${this.getTeamMembersRoute(teamId)}/batch`,\n            {method: 'post', body: JSON.stringify(members)},\n        );\n    };\n\n    addUsersToTeamGracefully = (teamId: string, userIds: string[]) => {\n        this.trackEvent('api', 'api_teams_batch_add_members', {team_id: teamId, count: userIds.length});\n\n        const members: any = [];\n        userIds.forEach((id) => members.push({team_id: teamId, user_id: id}));\n        return this.doFetch<TeamMemberWithError[]>(\n            `${this.getTeamMembersRoute(teamId)}/batch?graceful=true`,\n            {method: 'post', body: JSON.stringify(members)},\n        );\n    };\n\n    joinTeam = (inviteId: string) => {\n        const query = buildQueryString({invite_id: inviteId});\n        return this.doFetch<TeamMembership>(\n            `${this.getTeamsRoute()}/members/invite${query}`,\n            {method: 'post'},\n        );\n    };\n\n    removeFromTeam = (teamId: string, userId: string) => {\n        this.trackEvent('api', 'api_teams_remove_members', {team_id: teamId});\n\n        return this.doFetch<StatusOK>(\n            `${this.getTeamMemberRoute(teamId, userId)}`,\n            {method: 'delete'},\n        );\n    };\n\n    getTeamStats = (teamId: string) => {\n        return this.doFetch<TeamStats>(\n            `${this.getTeamRoute(teamId)}/stats`,\n            {method: 'get'},\n        );\n    };\n\n    getTotalUsersStats = () => {\n        return this.doFetch<UsersStats>(\n            `${this.getUsersRoute()}/stats`,\n            {method: 'get'},\n        );\n    };\n\n    getFilteredUsersStats = (options: GetFilteredUsersStatsOpts) => {\n        return this.doFetch<UsersStats>(\n            `${this.getUsersRoute()}/stats/filtered${buildQueryString(options)}`,\n            {method: 'get'},\n        );\n    };\n\n    invalidateAllEmailInvites = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getTeamsRoute()}/invites/email`,\n            {method: 'delete'},\n        );\n    };\n\n    getTeamInviteInfo = (inviteId: string) => {\n        return this.doFetch<{\n            display_name: string;\n            description: string;\n            name: string;\n            id: string;\n        }>(\n            `${this.getTeamsRoute()}/invite/${inviteId}`,\n            {method: 'get'},\n        );\n    };\n\n    updateTeamMemberRoles = (teamId: string, userId: string, roles: string[]) => {\n        this.trackEvent('api', 'api_teams_update_member_roles', {team_id: teamId});\n\n        return this.doFetch<StatusOK>(\n            `${this.getTeamMemberRoute(teamId, userId)}/roles`,\n            {method: 'put', body: JSON.stringify({roles})},\n        );\n    };\n\n    sendEmailInvitesToTeam = (teamId: string, emails: string[]) => {\n        this.trackEvent('api', 'api_teams_invite_members', {team_id: teamId});\n\n        return this.doFetch<StatusOK>(\n            `${this.getTeamRoute(teamId)}/invite/email`,\n            {method: 'post', body: JSON.stringify(emails)},\n        );\n    };\n\n    sendEmailGuestInvitesToChannels = (teamId: string, channelIds: string[], emails: string[], message: string) => {\n        this.trackEvent('api', 'api_teams_invite_guests', {team_id: teamId, channel_ids: channelIds});\n\n        return this.doFetch<StatusOK>(\n            `${this.getTeamRoute(teamId)}/invite-guests/email`,\n            {method: 'post', body: JSON.stringify({emails, channels: channelIds, message})},\n        );\n    };\n\n    sendEmailInvitesToTeamGracefully = (teamId: string, emails: string[]) => {\n        this.trackEvent('api', 'api_teams_invite_members', {team_id: teamId});\n\n        return this.doFetch<TeamInviteWithError>(\n            `${this.getTeamRoute(teamId)}/invite/email?graceful=true`,\n            {method: 'post', body: JSON.stringify(emails)},\n        );\n    };\n\n    sendEmailGuestInvitesToChannelsGracefully = async (teamId: string, channelIds: string[], emails: string[], message: string) => {\n        this.trackEvent('api', 'api_teams_invite_guests', {team_id: teamId, channel_ids: channelIds});\n\n        return this.doFetch<TeamInviteWithError>(\n            `${this.getTeamRoute(teamId)}/invite-guests/email?graceful=true`,\n            {method: 'post', body: JSON.stringify({emails, channels: channelIds, message})},\n        );\n    };\n\n    importTeam = (teamId: string, file: File, importFrom: string) => {\n        const formData = new FormData();\n        formData.append('file', file, file.name);\n        formData.append('filesize', file.size);\n        formData.append('importFrom', importFrom);\n\n        const request: any = {\n            method: 'post',\n            body: formData,\n        };\n\n        if (formData.getBoundary) {\n            request.headers = {\n                'Content-Type': `multipart/form-data; boundary=${formData.getBoundary()}`,\n            };\n        }\n\n        return this.doFetch<{\n            results: string;\n        }>(\n            `${this.getTeamRoute(teamId)}/import`,\n            request,\n        );\n    };\n\n    getTeamIconUrl = (teamId: string, lastTeamIconUpdate: number) => {\n        const params: any = {};\n        if (lastTeamIconUpdate) {\n            params._ = lastTeamIconUpdate;\n        }\n\n        return `${this.getTeamRoute(teamId)}/image${buildQueryString(params)}`;\n    };\n\n    setTeamIcon = (teamId: string, imageData: File) => {\n        this.trackEvent('api', 'api_team_set_team_icon');\n\n        const formData = new FormData();\n        formData.append('image', imageData);\n\n        const request: any = {\n            method: 'post',\n            body: formData,\n        };\n\n        if (formData.getBoundary) {\n            request.headers = {\n                'Content-Type': `multipart/form-data; boundary=${formData.getBoundary()}`,\n            };\n        }\n\n        return this.doFetch<StatusOK>(\n            `${this.getTeamRoute(teamId)}/image`,\n            request,\n        );\n    };\n\n    removeTeamIcon = (teamId: string) => {\n        this.trackEvent('api', 'api_team_remove_team_icon');\n\n        return this.doFetch<StatusOK>(\n            `${this.getTeamRoute(teamId)}/image`,\n            {method: 'delete'},\n        );\n    };\n\n    updateTeamMemberSchemeRoles = (teamId: string, userId: string, isSchemeUser: boolean, isSchemeAdmin: boolean) => {\n        const body = {scheme_user: isSchemeUser, scheme_admin: isSchemeAdmin};\n        return this.doFetch<StatusOK>(\n            `${this.getTeamRoute(teamId)}/members/${userId}/schemeRoles`,\n            {method: 'put', body: JSON.stringify(body)},\n        );\n    };\n\n    // Channel Routes\n\n    getAllChannels = (page = 0, perPage = PER_PAGE_DEFAULT, notAssociatedToGroup = '', excludeDefaultChannels = false, includeTotalCount = false, includeDeleted = false) => {\n        const queryData = {\n            page,\n            per_page: perPage,\n            not_associated_to_group: notAssociatedToGroup,\n            exclude_default_channels: excludeDefaultChannels,\n            include_total_count: includeTotalCount,\n            include_deleted: includeDeleted,\n        };\n        return this.doFetch<ChannelWithTeamData[] | ChannelsWithTotalCount>(\n            `${this.getChannelsRoute()}${buildQueryString(queryData)}`,\n            {method: 'get'},\n        );\n    };\n\n    createChannel = (channel: Channel) => {\n        this.trackEvent('api', 'api_channels_create', {team_id: channel.team_id});\n\n        return this.doFetch<Channel>(\n            `${this.getChannelsRoute()}`,\n            {method: 'post', body: JSON.stringify(channel)},\n        );\n    };\n\n    createDirectChannel = (userIds: string[]) => {\n        this.trackEvent('api', 'api_channels_create_direct');\n\n        return this.doFetch<Channel>(\n            `${this.getChannelsRoute()}/direct`,\n            {method: 'post', body: JSON.stringify(userIds)},\n        );\n    };\n\n    createGroupChannel = (userIds: string[]) => {\n        this.trackEvent('api', 'api_channels_create_group');\n\n        return this.doFetch<Channel>(\n            `${this.getChannelsRoute()}/group`,\n            {method: 'post', body: JSON.stringify(userIds)},\n        );\n    };\n\n    deleteChannel = (channelId: string) => {\n        this.trackEvent('api', 'api_channels_delete', {channel_id: channelId});\n\n        return this.doFetch<StatusOK>(\n            `${this.getChannelRoute(channelId)}`,\n            {method: 'delete'},\n        );\n    };\n\n    unarchiveChannel = (channelId: string) => {\n        this.trackEvent('api', 'api_channels_unarchive', {channel_id: channelId});\n\n        return this.doFetch<Channel>(\n            `${this.getChannelRoute(channelId)}/restore`,\n            {method: 'post'},\n        );\n    };\n\n    updateChannel = (channel: Channel) => {\n        this.trackEvent('api', 'api_channels_update', {channel_id: channel.id});\n\n        return this.doFetch<Channel>(\n            `${this.getChannelRoute(channel.id)}`,\n            {method: 'put', body: JSON.stringify(channel)},\n        );\n    };\n\n    convertChannelToPrivate = (channelId: string) => {\n        this.trackEvent('api', 'api_channels_convert_to_private', {channel_id: channelId});\n\n        return this.doFetch<Channel>(\n            `${this.getChannelRoute(channelId)}/convert`,\n            {method: 'post'},\n        );\n    };\n\n    updateChannelPrivacy = (channelId: string, privacy: any) => {\n        this.trackEvent('api', 'api_channels_update_privacy', {channel_id: channelId, privacy});\n\n        return this.doFetch<Channel>(\n            `${this.getChannelRoute(channelId)}/privacy`,\n            {method: 'put', body: JSON.stringify({privacy})},\n        );\n    };\n\n    patchChannel = (channelId: string, channelPatch: Partial<Channel>) => {\n        this.trackEvent('api', 'api_channels_patch', {channel_id: channelId});\n\n        return this.doFetch<Channel>(\n            `${this.getChannelRoute(channelId)}/patch`,\n            {method: 'put', body: JSON.stringify(channelPatch)},\n        );\n    };\n\n    updateChannelNotifyProps = (props: any) => {\n        this.trackEvent('api', 'api_users_update_channel_notifications', {channel_id: props.channel_id});\n\n        return this.doFetch<StatusOK>(\n            `${this.getChannelMemberRoute(props.channel_id, props.user_id)}/notify_props`,\n            {method: 'put', body: JSON.stringify(props)},\n        );\n    };\n\n    updateChannelScheme = (channelId: string, schemeId: string) => {\n        const patch = {scheme_id: schemeId};\n\n        this.trackEvent('api', 'api_channels_update_scheme', {channel_id: channelId, ...patch});\n\n        return this.doFetch<StatusOK>(\n            `${this.getChannelSchemeRoute(channelId)}`,\n            {method: 'put', body: JSON.stringify(patch)},\n        );\n    };\n\n    getChannel = (channelId: string) => {\n        this.trackEvent('api', 'api_channel_get', {channel_id: channelId});\n\n        return this.doFetch<Channel>(\n            `${this.getChannelRoute(channelId)}`,\n            {method: 'get'},\n        );\n    };\n\n    getChannelByName = (teamId: string, channelName: string, includeDeleted = false) => {\n        return this.doFetch<Channel>(\n            `${this.getTeamRoute(teamId)}/channels/name/${channelName}?include_deleted=${includeDeleted}`,\n            {method: 'get'},\n        );\n    };\n\n    getChannelByNameAndTeamName = (teamName: string, channelName: string, includeDeleted = false) => {\n        this.trackEvent('api', 'api_channel_get_by_name_and_teamName', {include_deleted: includeDeleted});\n\n        return this.doFetch<Channel>(\n            `${this.getTeamNameRoute(teamName)}/channels/name/${channelName}?include_deleted=${includeDeleted}`,\n            {method: 'get'},\n        );\n    };\n\n    getChannels = (teamId: string, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Channel[]>(\n            `${this.getTeamRoute(teamId)}/channels${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getArchivedChannels = (teamId: string, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Channel[]>(\n            `${this.getTeamRoute(teamId)}/channels/deleted${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getMyChannels = (teamId: string, includeDeleted = false) => {\n        return this.doFetch<Channel[]>(\n            `${this.getUserRoute('me')}/teams/${teamId}/channels${buildQueryString({include_deleted: includeDeleted})}`,\n            {method: 'get'},\n        );\n    };\n\n    getMyChannelMember = (channelId: string) => {\n        return this.doFetch<ChannelMembership>(\n            `${this.getChannelMemberRoute(channelId, 'me')}`,\n            {method: 'get'},\n        );\n    };\n\n    getMyChannelMembers = (teamId: string) => {\n        return this.doFetch<ChannelMembership[]>(\n            `${this.getUserRoute('me')}/teams/${teamId}/channels/members`,\n            {method: 'get'},\n        );\n    };\n\n    getChannelMembers = (channelId: string, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<ChannelMembership[]>(\n            `${this.getChannelMembersRoute(channelId)}${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getChannelTimezones = (channelId: string) => {\n        return this.doFetch<string[]>(\n            `${this.getChannelRoute(channelId)}/timezones`,\n            {method: 'get'},\n        );\n    };\n\n    getChannelMember = (channelId: string, userId: string) => {\n        return this.doFetch<ChannelMembership>(\n            `${this.getChannelMemberRoute(channelId, userId)}`,\n            {method: 'get'},\n        );\n    };\n\n    getChannelMembersByIds = (channelId: string, userIds: string[]) => {\n        return this.doFetch<ChannelMembership[]>(\n            `${this.getChannelMembersRoute(channelId)}/ids`,\n            {method: 'post', body: JSON.stringify(userIds)},\n        );\n    };\n\n    addToChannel = (userId: string, channelId: string, postRootId = '') => {\n        this.trackEvent('api', 'api_channels_add_member', {channel_id: channelId});\n\n        const member = {user_id: userId, channel_id: channelId, post_root_id: postRootId};\n        return this.doFetch<ChannelMembership>(\n            `${this.getChannelMembersRoute(channelId)}`,\n            {method: 'post', body: JSON.stringify(member)},\n        );\n    };\n\n    removeFromChannel = (userId: string, channelId: string) => {\n        this.trackEvent('api', 'api_channels_remove_member', {channel_id: channelId});\n\n        return this.doFetch<StatusOK>(\n            `${this.getChannelMemberRoute(channelId, userId)}`,\n            {method: 'delete'},\n        );\n    };\n\n    updateChannelMemberRoles = (channelId: string, userId: string, roles: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getChannelMemberRoute(channelId, userId)}/roles`,\n            {method: 'put', body: JSON.stringify({roles})},\n        );\n    };\n\n    getChannelStats = (channelId: string) => {\n        return this.doFetch<ChannelStats>(\n            `${this.getChannelRoute(channelId)}/stats`,\n            {method: 'get'},\n        );\n    };\n\n    getChannelModerations = (channelId: string) => {\n        return this.doFetch<ChannelModeration[]>(\n            `${this.getChannelRoute(channelId)}/moderations`,\n            {method: 'get'},\n        );\n    };\n\n    patchChannelModerations = (channelId: string, channelModerationsPatch: ChannelModerationPatch[]) => {\n        return this.doFetch<ChannelModeration[]>(\n            `${this.getChannelRoute(channelId)}/moderations/patch`,\n            {method: 'put', body: JSON.stringify(channelModerationsPatch)},\n        );\n    };\n\n    getChannelMemberCountsByGroup = (channelId: string, includeTimezones: boolean) => {\n        return this.doFetch<ChannelMemberCountsByGroup>(\n            `${this.getChannelRoute(channelId)}/member_counts_by_group?include_timezones=${includeTimezones}`,\n            {method: 'get'},\n        );\n    };\n\n    viewMyChannel = (channelId: string, prevChannelId?: string) => {\n        const data = {channel_id: channelId, prev_channel_id: prevChannelId};\n        return this.doFetch<ChannelViewResponse>(\n            `${this.getChannelsRoute()}/members/me/view`,\n            {method: 'post', body: JSON.stringify(data)},\n        );\n    };\n\n    autocompleteChannels = (teamId: string, name: string) => {\n        return this.doFetch<Channel[]>(\n            `${this.getTeamRoute(teamId)}/channels/autocomplete${buildQueryString({name})}`,\n            {method: 'get'},\n        );\n    };\n\n    autocompleteChannelsForSearch = (teamId: string, name: string) => {\n        return this.doFetch<Channel[]>(\n            `${this.getTeamRoute(teamId)}/channels/search_autocomplete${buildQueryString({name})}`,\n            {method: 'get'},\n        );\n    };\n\n    searchChannels = (teamId: string, term: string) => {\n        return this.doFetch<Channel[]>(\n            `${this.getTeamRoute(teamId)}/channels/search`,\n            {method: 'post', body: JSON.stringify({term})},\n        );\n    };\n\n    searchArchivedChannels = (teamId: string, term: string) => {\n        return this.doFetch<Channel[]>(\n            `${this.getTeamRoute(teamId)}/channels/search_archived`,\n            {method: 'post', body: JSON.stringify({term})},\n        );\n    };\n\n    searchAllChannels = (term: string, opts: ChannelSearchOpts = {}) => {\n        const body = {\n            term,\n            ...opts,\n        };\n        const includeDeleted = Boolean(opts.include_deleted);\n        return this.doFetch<Channel[] | ChannelsWithTotalCount>(\n            `${this.getChannelsRoute()}/search?include_deleted=${includeDeleted}`,\n            {method: 'post', body: JSON.stringify(body)},\n        );\n    };\n\n    searchGroupChannels = (term: string) => {\n        return this.doFetch<Channel[]>(\n            `${this.getChannelsRoute()}/group/search`,\n            {method: 'post', body: JSON.stringify({term})},\n        );\n    };\n\n    updateChannelMemberSchemeRoles = (channelId: string, userId: string, isSchemeUser: boolean, isSchemeAdmin: boolean) => {\n        const body = {scheme_user: isSchemeUser, scheme_admin: isSchemeAdmin};\n        return this.doFetch<StatusOK>(\n            `${this.getChannelRoute(channelId)}/members/${userId}/schemeRoles`,\n            {method: 'put', body: JSON.stringify(body)},\n        );\n    };\n\n    // Channel Category Routes\n\n    getChannelCategories = (userId: string, teamId: string) => {\n        return this.doFetch<OrderedChannelCategories>(\n            `${this.getChannelCategoriesRoute(userId, teamId)}`,\n            {method: 'get'},\n        );\n    };\n\n    createChannelCategory = (userId: string, teamId: string, category: Partial<ChannelCategory>) => {\n        return this.doFetch<ChannelCategory>(\n            `${this.getChannelCategoriesRoute(userId, teamId)}`,\n            {method: 'post', body: JSON.stringify(category)},\n        );\n    };\n\n    updateChannelCategories = (userId: string, teamId: string, categories: ChannelCategory[]) => {\n        return this.doFetch<ChannelCategory[]>(\n            `${this.getChannelCategoriesRoute(userId, teamId)}`,\n            {method: 'put', body: JSON.stringify(categories)},\n        );\n    };\n\n    getChannelCategoryOrder = (userId: string, teamId: string) => {\n        return this.doFetch<string[]>(\n            `${this.getChannelCategoriesRoute(userId, teamId)}/order`,\n            {method: 'get'},\n        );\n    };\n\n    updateChannelCategoryOrder = (userId: string, teamId: string, categoryOrder: string[]) => {\n        return this.doFetch<string[]>(\n            `${this.getChannelCategoriesRoute(userId, teamId)}/order`,\n            {method: 'put', body: JSON.stringify(categoryOrder)},\n        );\n    };\n\n    getChannelCategory = (userId: string, teamId: string, categoryId: string) => {\n        return this.doFetch<ChannelCategory>(\n            `${this.getChannelCategoriesRoute(userId, teamId)}/${categoryId}`,\n            {method: 'get'},\n        );\n    };\n\n    updateChannelCategory = (userId: string, teamId: string, category: ChannelCategory) => {\n        return this.doFetch<ChannelCategory>(\n            `${this.getChannelCategoriesRoute(userId, teamId)}/${category.id}`,\n            {method: 'put', body: JSON.stringify(category)},\n        );\n    };\n\n    deleteChannelCategory = (userId: string, teamId: string, categoryId: string) => {\n        return this.doFetch<ChannelCategory>(\n            `${this.getChannelCategoriesRoute(userId, teamId)}/${categoryId}`,\n            {method: 'delete'},\n        );\n    }\n\n    // Post Routes\n\n    createPost = async (post: Post) => {\n        const result = await this.doFetch<Post>(\n            `${this.getPostsRoute()}`,\n            {method: 'post', body: JSON.stringify(post)},\n        );\n        const analyticsData = {channel_id: result.channel_id, post_id: result.id, user_actual_id: result.user_id, root_id: result.root_id};\n        this.trackEvent('api', 'api_posts_create', analyticsData);\n\n        if (result.root_id != null && result.root_id !== '') {\n            this.trackEvent('api', 'api_posts_replied', analyticsData);\n        }\n        return result;\n    };\n\n    updatePost = (post: Post) => {\n        this.trackEvent('api', 'api_posts_update', {channel_id: post.channel_id, post_id: post.id});\n\n        return this.doFetch<Post>(\n            `${this.getPostRoute(post.id)}`,\n            {method: 'put', body: JSON.stringify(post)},\n        );\n    };\n\n    getPost = (postId: string) => {\n        return this.doFetch<Post>(\n            `${this.getPostRoute(postId)}`,\n            {method: 'get'},\n        );\n    };\n\n    patchPost = (postPatch: Partial<Post> & {id: string}) => {\n        this.trackEvent('api', 'api_posts_patch', {channel_id: postPatch.channel_id, post_id: postPatch.id});\n\n        return this.doFetch<Post>(\n            `${this.getPostRoute(postPatch.id)}/patch`,\n            {method: 'put', body: JSON.stringify(postPatch)},\n        );\n    };\n\n    deletePost = (postId: string) => {\n        this.trackEvent('api', 'api_posts_delete');\n\n        return this.doFetch<StatusOK>(\n            `${this.getPostRoute(postId)}`,\n            {method: 'delete'},\n        );\n    };\n\n    getPostThread = (postId: string, fetchThreads = true, collapsedThreads = false, collapsedThreadsExtended = false) => {\n        return this.doFetch<PostList>(\n            `${this.getPostRoute(postId)}/thread${buildQueryString({skipFetchThreads: !fetchThreads, collapsedThreads, collapsedThreadsExtended})}`,\n            {method: 'get'},\n        );\n    };\n\n    getPosts = (channelId: string, page = 0, perPage = PER_PAGE_DEFAULT, fetchThreads = true, collapsedThreads = false, collapsedThreadsExtended = false) => {\n        return this.doFetch<PostList>(\n            `${this.getChannelRoute(channelId)}/posts${buildQueryString({page, per_page: perPage, skipFetchThreads: !fetchThreads, collapsedThreads, collapsedThreadsExtended})}`,\n            {method: 'get'},\n        );\n    };\n\n    getPostsUnread = (channelId: string, userId: string, limitAfter = DEFAULT_LIMIT_AFTER, limitBefore = DEFAULT_LIMIT_BEFORE, fetchThreads = true, collapsedThreads = false, collapsedThreadsExtended = false) => {\n        return this.doFetch<PostList>(\n            `${this.getUserRoute(userId)}/channels/${channelId}/posts/unread${buildQueryString({limit_after: limitAfter, limit_before: limitBefore, skipFetchThreads: !fetchThreads, collapsedThreads, collapsedThreadsExtended})}`,\n            {method: 'get'},\n        );\n    };\n\n    getPostsSince = (channelId: string, since: number, fetchThreads = true, collapsedThreads = false, collapsedThreadsExtended = false) => {\n        return this.doFetch<PostList>(\n            `${this.getChannelRoute(channelId)}/posts${buildQueryString({since, skipFetchThreads: !fetchThreads, collapsedThreads, collapsedThreadsExtended})}`,\n            {method: 'get'},\n        );\n    };\n\n    getPostsBefore = (channelId: string, postId: string, page = 0, perPage = PER_PAGE_DEFAULT, fetchThreads = true, collapsedThreads = false, collapsedThreadsExtended = false) => {\n        this.trackEvent('api', 'api_posts_get_before', {channel_id: channelId});\n\n        return this.doFetch<PostList>(\n            `${this.getChannelRoute(channelId)}/posts${buildQueryString({before: postId, page, per_page: perPage, skipFetchThreads: !fetchThreads, collapsedThreads, collapsedThreadsExtended})}`,\n            {method: 'get'},\n        );\n    };\n\n    getPostsAfter = (channelId: string, postId: string, page = 0, perPage = PER_PAGE_DEFAULT, fetchThreads = true, collapsedThreads = false, collapsedThreadsExtended = false) => {\n        this.trackEvent('api', 'api_posts_get_after', {channel_id: channelId});\n\n        return this.doFetch<PostList>(\n            `${this.getChannelRoute(channelId)}/posts${buildQueryString({after: postId, page, per_page: perPage, skipFetchThreads: !fetchThreads, collapsedThreads, collapsedThreadsExtended})}`,\n            {method: 'get'},\n        );\n    };\n\n    getUserThreads = (\n        userId: $ID<UserProfile> = 'me',\n        teamId: $ID<Team>,\n        {\n            before = '',\n            after = '',\n            pageSize = PER_PAGE_DEFAULT,\n            extended = false,\n            deleted = false,\n            unread = false,\n            since = 0,\n        },\n    ) => {\n        return this.doFetch<UserThreadList>(\n            `${this.getUserThreadsRoute(userId, teamId)}${buildQueryString({before, after, pageSize, extended, deleted, unread, since})}`,\n            {method: 'get'},\n        );\n    };\n\n    getUserThread = (userId: string, teamId: string, threadId: string, extended = false) => {\n        const url = `${this.getUserThreadRoute(userId, teamId, threadId)}`;\n        return this.doFetch<UserThread>(\n            `${url}${buildQueryString({extended})}`,\n            {method: 'get'},\n        );\n    };\n\n    getThreadMentionCountsByChannel = (userId: string, teamId: string) => {\n        const url = `${this.getUserThreadsRoute(userId, teamId)}/mention_counts`;\n        return this.doFetch<Record<string, number>>(\n            url,\n            {method: 'get'},\n        );\n    };\n\n    updateThreadsReadForUser = (userId: string, teamId: string) => {\n        const url = `${this.getUserThreadsRoute(userId, teamId)}/read`;\n        return this.doFetch<StatusOK>(\n            url,\n            {method: 'put'},\n        );\n    };\n\n    updateThreadReadForUser = (userId: string, teamId: string, threadId: string, timestamp: number) => {\n        const url = `${this.getUserThreadRoute(userId, teamId, threadId)}/read/${timestamp}`;\n        return this.doFetch<StatusOK>(\n            url,\n            {method: 'put'},\n        );\n    };\n\n    updateThreadFollowForUser = (userId: string, teamId: string, threadId: string, state: boolean) => {\n        const url = this.getUserThreadRoute(userId, teamId, threadId) + '/following';\n        return this.doFetch<StatusOK>(\n            url,\n            {method: state ? 'put' : 'delete'},\n        );\n    };\n\n    getFileInfosForPost = (postId: string) => {\n        return this.doFetch<FileInfo[]>(\n            `${this.getPostRoute(postId)}/files/info`,\n            {method: 'get'},\n        );\n    };\n\n    getFlaggedPosts = (userId: string, channelId = '', teamId = '', page = 0, perPage = PER_PAGE_DEFAULT) => {\n        this.trackEvent('api', 'api_posts_get_flagged', {team_id: teamId});\n\n        return this.doFetch<PostList>(\n            `${this.getUserRoute(userId)}/posts/flagged${buildQueryString({channel_id: channelId, team_id: teamId, page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getPinnedPosts = (channelId: string) => {\n        this.trackEvent('api', 'api_posts_get_pinned', {channel_id: channelId});\n        return this.doFetch<PostList>(\n            `${this.getChannelRoute(channelId)}/pinned`,\n            {method: 'get'},\n        );\n    };\n\n    markPostAsUnread = (userId: string, postId: string) => {\n        this.trackEvent('api', 'api_post_set_unread_post');\n\n        return this.doFetch<ChannelUnread>(\n            `${this.getUserRoute(userId)}/posts/${postId}/set_unread`,\n            {method: 'post'},\n        );\n    }\n\n    pinPost = (postId: string) => {\n        this.trackEvent('api', 'api_posts_pin');\n\n        return this.doFetch<StatusOK>(\n            `${this.getPostRoute(postId)}/pin`,\n            {method: 'post'},\n        );\n    };\n\n    unpinPost = (postId: string) => {\n        this.trackEvent('api', 'api_posts_unpin');\n\n        return this.doFetch<StatusOK>(\n            `${this.getPostRoute(postId)}/unpin`,\n            {method: 'post'},\n        );\n    };\n\n    addReaction = (userId: string, postId: string, emojiName: string) => {\n        this.trackEvent('api', 'api_reactions_save', {post_id: postId});\n\n        return this.doFetch<Reaction>(\n            `${this.getReactionsRoute()}`,\n            {method: 'post', body: JSON.stringify({user_id: userId, post_id: postId, emoji_name: emojiName})},\n        );\n    };\n\n    removeReaction = (userId: string, postId: string, emojiName: string) => {\n        this.trackEvent('api', 'api_reactions_delete', {post_id: postId});\n\n        return this.doFetch<StatusOK>(\n            `${this.getUserRoute(userId)}/posts/${postId}/reactions/${emojiName}`,\n            {method: 'delete'},\n        );\n    };\n\n    getReactionsForPost = (postId: string) => {\n        return this.doFetch<Reaction[]>(\n            `${this.getPostRoute(postId)}/reactions`,\n            {method: 'get'},\n        );\n    };\n\n    searchPostsWithParams = (teamId: string, params: any) => {\n        this.trackEvent('api', 'api_posts_search', {team_id: teamId});\n\n        return this.doFetch<PostSearchResults>(\n            `${this.getTeamRoute(teamId)}/posts/search`,\n            {method: 'post', body: JSON.stringify(params)},\n        );\n    };\n\n    searchPosts = (teamId: string, terms: string, isOrSearch: boolean) => {\n        return this.searchPostsWithParams(teamId, {terms, is_or_search: isOrSearch});\n    };\n\n    getOpenGraphMetadata = (url: string) => {\n        return this.doFetch<OpenGraphMetadata>(\n            `${this.getBaseRoute()}/opengraph`,\n            {method: 'post', body: JSON.stringify({url})},\n        );\n    };\n\n    doPostAction = (postId: string, actionId: string, selectedOption = '') => {\n        return this.doPostActionWithCookie(postId, actionId, '', selectedOption);\n    };\n\n    doPostActionWithCookie = (postId: string, actionId: string, actionCookie: string, selectedOption = '') => {\n        if (selectedOption) {\n            this.trackEvent('api', 'api_interactive_messages_menu_selected');\n        } else {\n            this.trackEvent('api', 'api_interactive_messages_button_clicked');\n        }\n\n        const msg: any = {\n            selected_option: selectedOption,\n        };\n        if (actionCookie !== '') {\n            msg.cookie = actionCookie;\n        }\n        return this.doFetch<PostActionResponse>(\n            `${this.getPostRoute(postId)}/actions/${encodeURIComponent(actionId)}`,\n            {method: 'post', body: JSON.stringify(msg)},\n        );\n    };\n\n    // Files Routes\n\n    getFileUrl(fileId: string, timestamp: number) {\n        let url = `${this.getFileRoute(fileId)}`;\n        if (timestamp) {\n            url += `?${timestamp}`;\n        }\n\n        return url;\n    }\n\n    getFileThumbnailUrl(fileId: string, timestamp: number) {\n        let url = `${this.getFileRoute(fileId)}/thumbnail`;\n        if (timestamp) {\n            url += `?${timestamp}`;\n        }\n\n        return url;\n    }\n\n    getFilePreviewUrl(fileId: string, timestamp: number) {\n        let url = `${this.getFileRoute(fileId)}/preview`;\n        if (timestamp) {\n            url += `?${timestamp}`;\n        }\n\n        return url;\n    }\n\n    uploadFile = (fileFormData: any, formBoundary: string) => {\n        this.trackEvent('api', 'api_files_upload');\n        const request: any = {\n            method: 'post',\n            body: fileFormData,\n        };\n\n        if (formBoundary) {\n            request.headers = {\n                'Content-Type': `multipart/form-data; boundary=${formBoundary}`,\n            };\n        }\n\n        return this.doFetch<FileUploadResponse>(\n            `${this.getFilesRoute()}`,\n            request,\n        );\n    };\n\n    getFilePublicLink = (fileId: string) => {\n        return this.doFetch<{\n            link: string;\n        }>(\n            `${this.getFileRoute(fileId)}/link`,\n            {method: 'get'},\n        );\n    }\n\n    // Preference Routes\n\n    savePreferences = (userId: string, preferences: PreferenceType[]) => {\n        return this.doFetch<StatusOK>(\n            `${this.getPreferencesRoute(userId)}`,\n            {method: 'put', body: JSON.stringify(preferences)},\n        );\n    };\n\n    getMyPreferences = () => {\n        return this.doFetch<PreferenceType>(\n            `${this.getPreferencesRoute('me')}`,\n            {method: 'get'},\n        );\n    };\n\n    deletePreferences = (userId: string, preferences: PreferenceType[]) => {\n        return this.doFetch<StatusOK>(\n            `${this.getPreferencesRoute(userId)}/delete`,\n            {method: 'post', body: JSON.stringify(preferences)},\n        );\n    };\n\n    // General Routes\n\n    ping = () => {\n        return this.doFetch<{\n            status: string;\n        }>(\n            `${this.getBaseRoute()}/system/ping?time=${Date.now()}`,\n            {method: 'get'},\n        );\n    };\n\n    upgradeToEnterprise = async () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/upgrade_to_enterprise`,\n            {method: 'post'},\n        );\n    }\n\n    upgradeToEnterpriseStatus = async () => {\n        return this.doFetch<{\n            percentage: number;\n            error: string | null;\n        }>(\n            `${this.getBaseRoute()}/upgrade_to_enterprise/status`,\n            {method: 'get'},\n        );\n    }\n\n    restartServer = async () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/restart`,\n            {method: 'post'},\n        );\n    }\n\n    logClientError = (message: string, level = 'ERROR') => {\n        const url = `${this.getBaseRoute()}/logs`;\n\n        if (!this.enableLogging) {\n            throw new ClientError(this.getUrl(), {\n                message: 'Logging disabled.',\n                url,\n            });\n        }\n\n        return this.doFetch<{\n            message: string;\n        }>(\n            url,\n            {method: 'post', body: JSON.stringify({message, level})},\n        );\n    };\n\n    getClientConfigOld = () => {\n        return this.doFetch<ClientConfig>(\n            `${this.getBaseRoute()}/config/client?format=old`,\n            {method: 'get'},\n        );\n    };\n\n    getClientLicenseOld = () => {\n        return this.doFetch<ClientLicense>(\n            `${this.getBaseRoute()}/license/client?format=old`,\n            {method: 'get'},\n        );\n    };\n\n    getWarnMetricsStatus = async () => {\n        return this.doFetch(\n            `${this.getBaseRoute()}/warn_metrics/status`,\n            {method: 'get'},\n        );\n    };\n\n    sendWarnMetricAck = async (warnMetricId: string, forceAckVal: boolean) => {\n        return this.doFetch(\n            `${this.getBaseRoute()}/warn_metrics/ack/${encodeURI(warnMetricId)}`,\n            {method: 'post', body: JSON.stringify({forceAck: forceAckVal})},\n        );\n    }\n\n    getTranslations = (url: string) => {\n        return this.doFetch<Record<string, string>>(\n            url,\n            {method: 'get'},\n        );\n    };\n\n    getWebSocketUrl = () => {\n        return `${this.getBaseRoute()}/websocket`;\n    }\n\n    // Integration Routes\n\n    createIncomingWebhook = (hook: IncomingWebhook) => {\n        this.trackEvent('api', 'api_integrations_created', {team_id: hook.team_id});\n\n        return this.doFetch<IncomingWebhook>(\n            `${this.getIncomingHooksRoute()}`,\n            {method: 'post', body: JSON.stringify(hook)},\n        );\n    };\n\n    getIncomingWebhook = (hookId: string) => {\n        return this.doFetch<IncomingWebhook>(\n            `${this.getIncomingHookRoute(hookId)}`,\n            {method: 'get'},\n        );\n    };\n\n    getIncomingWebhooks = (teamId = '', page = 0, perPage = PER_PAGE_DEFAULT) => {\n        const queryParams: any = {\n            page,\n            per_page: perPage,\n        };\n\n        if (teamId) {\n            queryParams.team_id = teamId;\n        }\n\n        return this.doFetch<IncomingWebhook[]>(\n            `${this.getIncomingHooksRoute()}${buildQueryString(queryParams)}`,\n            {method: 'get'},\n        );\n    };\n\n    removeIncomingWebhook = (hookId: string) => {\n        this.trackEvent('api', 'api_integrations_deleted');\n\n        return this.doFetch<StatusOK>(\n            `${this.getIncomingHookRoute(hookId)}`,\n            {method: 'delete'},\n        );\n    };\n\n    updateIncomingWebhook = (hook: IncomingWebhook) => {\n        this.trackEvent('api', 'api_integrations_updated', {team_id: hook.team_id});\n\n        return this.doFetch<IncomingWebhook>(\n            `${this.getIncomingHookRoute(hook.id)}`,\n            {method: 'put', body: JSON.stringify(hook)},\n        );\n    };\n\n    createOutgoingWebhook = (hook: OutgoingWebhook) => {\n        this.trackEvent('api', 'api_integrations_created', {team_id: hook.team_id});\n\n        return this.doFetch<OutgoingWebhook>(\n            `${this.getOutgoingHooksRoute()}`,\n            {method: 'post', body: JSON.stringify(hook)},\n        );\n    };\n\n    getOutgoingWebhook = (hookId: string) => {\n        return this.doFetch<OutgoingWebhook>(\n            `${this.getOutgoingHookRoute(hookId)}`,\n            {method: 'get'},\n        );\n    };\n\n    getOutgoingWebhooks = (channelId = '', teamId = '', page = 0, perPage = PER_PAGE_DEFAULT) => {\n        const queryParams: any = {\n            page,\n            per_page: perPage,\n        };\n\n        if (channelId) {\n            queryParams.channel_id = channelId;\n        }\n\n        if (teamId) {\n            queryParams.team_id = teamId;\n        }\n\n        return this.doFetch<OutgoingWebhook[]>(\n            `${this.getOutgoingHooksRoute()}${buildQueryString(queryParams)}`,\n            {method: 'get'},\n        );\n    };\n\n    removeOutgoingWebhook = (hookId: string) => {\n        this.trackEvent('api', 'api_integrations_deleted');\n\n        return this.doFetch<StatusOK>(\n            `${this.getOutgoingHookRoute(hookId)}`,\n            {method: 'delete'},\n        );\n    };\n\n    updateOutgoingWebhook = (hook: OutgoingWebhook) => {\n        this.trackEvent('api', 'api_integrations_updated', {team_id: hook.team_id});\n\n        return this.doFetch<OutgoingWebhook>(\n            `${this.getOutgoingHookRoute(hook.id)}`,\n            {method: 'put', body: JSON.stringify(hook)},\n        );\n    };\n\n    regenOutgoingHookToken = (id: string) => {\n        return this.doFetch<OutgoingWebhook>(\n            `${this.getOutgoingHookRoute(id)}/regen_token`,\n            {method: 'post'},\n        );\n    };\n\n    getCommandsList = (teamId: string) => {\n        return this.doFetch<Command[]>(\n            `${this.getCommandsRoute()}?team_id=${teamId}`,\n            {method: 'get'},\n        );\n    };\n\n    getCommandAutocompleteSuggestionsList = (userInput: string, teamId: string, commandArgs: CommandArgs) => {\n        return this.doFetch<AutocompleteSuggestion[]>(\n            `${this.getTeamRoute(teamId)}/commands/autocomplete_suggestions${buildQueryString({...commandArgs, user_input: userInput})}`,\n            {method: 'get'},\n        );\n    };\n\n    getAutocompleteCommandsList = (teamId: string, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Command[]>(\n            `${this.getTeamRoute(teamId)}/commands/autocomplete${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getCustomTeamCommands = (teamId: string) => {\n        return this.doFetch<Command[]>(\n            `${this.getCommandsRoute()}?team_id=${teamId}&custom_only=true`,\n            {method: 'get'},\n        );\n    };\n\n    executeCommand = (command: string, commandArgs: CommandArgs) => {\n        this.trackEvent('api', 'api_integrations_used');\n\n        return this.doFetch<CommandResponse>(\n            `${this.getCommandsRoute()}/execute`,\n            {method: 'post', body: JSON.stringify({command, ...commandArgs})},\n        );\n    };\n\n    addCommand = (command: Command) => {\n        this.trackEvent('api', 'api_integrations_created');\n\n        return this.doFetch<Command>(\n            `${this.getCommandsRoute()}`,\n            {method: 'post', body: JSON.stringify(command)},\n        );\n    };\n\n    editCommand = (command: Command) => {\n        this.trackEvent('api', 'api_integrations_created');\n\n        return this.doFetch<Command>(\n            `${this.getCommandsRoute()}/${command.id}`,\n            {method: 'put', body: JSON.stringify(command)},\n        );\n    };\n\n    regenCommandToken = (id: string) => {\n        return this.doFetch<{\n            token: string;\n        }>(\n            `${this.getCommandsRoute()}/${id}/regen_token`,\n            {method: 'put'},\n        );\n    };\n\n    deleteCommand = (id: string) => {\n        this.trackEvent('api', 'api_integrations_deleted');\n\n        return this.doFetch<StatusOK>(\n            `${this.getCommandsRoute()}/${id}`,\n            {method: 'delete'},\n        );\n    };\n\n    createOAuthApp = (app: OAuthApp) => {\n        this.trackEvent('api', 'api_apps_register');\n\n        return this.doFetch<OAuthApp>(\n            `${this.getOAuthAppsRoute()}`,\n            {method: 'post', body: JSON.stringify(app)},\n        );\n    };\n\n    editOAuthApp = (app: OAuthApp) => {\n        return this.doFetch<OAuthApp>(\n            `${this.getOAuthAppsRoute()}/${app.id}`,\n            {method: 'put', body: JSON.stringify(app)},\n        );\n    };\n\n    getOAuthApps = (page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<OAuthApp[]>(\n            `${this.getOAuthAppsRoute()}${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getOAuthApp = (appId: string) => {\n        return this.doFetch<OAuthApp>(\n            `${this.getOAuthAppRoute(appId)}`,\n            {method: 'get'},\n        );\n    };\n\n    getOAuthAppInfo = (appId: string) => {\n        return this.doFetch<OAuthApp>(\n            `${this.getOAuthAppRoute(appId)}/info`,\n            {method: 'get'},\n        );\n    };\n\n    deleteOAuthApp = (appId: string) => {\n        this.trackEvent('api', 'api_apps_delete');\n\n        return this.doFetch<StatusOK>(\n            `${this.getOAuthAppRoute(appId)}`,\n            {method: 'delete'},\n        );\n    };\n\n    regenOAuthAppSecret = (appId: string) => {\n        return this.doFetch<OAuthApp>(\n            `${this.getOAuthAppRoute(appId)}/regen_secret`,\n            {method: 'post'},\n        );\n    };\n\n    submitInteractiveDialog = (data: DialogSubmission) => {\n        this.trackEvent('api', 'api_interactive_messages_dialog_submitted');\n        return this.doFetch<SubmitDialogResponse>(\n            `${this.getBaseRoute()}/actions/dialogs/submit`,\n            {method: 'post', body: JSON.stringify(data)},\n        );\n    };\n\n    // Emoji Routes\n\n    createCustomEmoji = (emoji: CustomEmoji, imageData: File) => {\n        this.trackEvent('api', 'api_emoji_custom_add');\n\n        const formData = new FormData();\n        formData.append('image', imageData);\n        formData.append('emoji', JSON.stringify(emoji));\n        const request: any = {\n            method: 'post',\n            body: formData,\n        };\n\n        if (formData.getBoundary) {\n            request.headers = {\n                'Content-Type': `multipart/form-data; boundary=${formData.getBoundary()}`,\n            };\n        }\n\n        return this.doFetch<CustomEmoji>(\n            `${this.getEmojisRoute()}`,\n            request,\n        );\n    };\n\n    getCustomEmoji = (id: string) => {\n        return this.doFetch<CustomEmoji>(\n            `${this.getEmojisRoute()}/${id}`,\n            {method: 'get'},\n        );\n    };\n\n    getCustomEmojiByName = (name: string) => {\n        return this.doFetch<CustomEmoji>(\n            `${this.getEmojisRoute()}/name/${name}`,\n            {method: 'get'},\n        );\n    };\n\n    getCustomEmojis = (page = 0, perPage = PER_PAGE_DEFAULT, sort = '') => {\n        return this.doFetch<CustomEmoji[]>(\n            `${this.getEmojisRoute()}${buildQueryString({page, per_page: perPage, sort})}`,\n            {method: 'get'},\n        );\n    };\n\n    deleteCustomEmoji = (emojiId: string) => {\n        this.trackEvent('api', 'api_emoji_custom_delete');\n\n        return this.doFetch<StatusOK>(\n            `${this.getEmojiRoute(emojiId)}`,\n            {method: 'delete'},\n        );\n    };\n\n    getSystemEmojiImageUrl = (filename: string) => {\n        return `${this.url}/static/emoji/${filename}.png`;\n    };\n\n    getCustomEmojiImageUrl = (id: string) => {\n        return `${this.getEmojiRoute(id)}/image`;\n    };\n\n    searchCustomEmoji = (term: string, options = {}) => {\n        return this.doFetch<CustomEmoji[]>(\n            `${this.getEmojisRoute()}/search`,\n            {method: 'post', body: JSON.stringify({term, ...options})},\n        );\n    };\n\n    autocompleteCustomEmoji = (name: string) => {\n        return this.doFetch<CustomEmoji[]>(\n            `${this.getEmojisRoute()}/autocomplete${buildQueryString({name})}`,\n            {method: 'get'},\n        );\n    };\n\n    // Timezone Routes\n\n    getTimezones = () => {\n        return this.doFetch<string[]>(\n            `${this.getTimezonesRoute()}`,\n            {method: 'get'},\n        );\n    };\n\n    // Data Retention\n\n    getDataRetentionPolicy = () => {\n        return this.doFetch<DataRetentionPolicy>(\n            `${this.getDataRetentionRoute()}/policy`,\n            {method: 'get'},\n        );\n    };\n\n    // Jobs Routes\n\n    getJob = (id: string) => {\n        return this.doFetch<Job>(\n            `${this.getJobsRoute()}/${id}`,\n            {method: 'get'},\n        );\n    };\n\n    getJobs = (page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Job[]>(\n            `${this.getJobsRoute()}${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getJobsByType = (type: string, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Job[]>(\n            `${this.getJobsRoute()}/type/${type}${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    createJob = (job: Job) => {\n        return this.doFetch<Job>(\n            `${this.getJobsRoute()}`,\n            {method: 'post', body: JSON.stringify(job)},\n        );\n    };\n\n    cancelJob = (id: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getJobsRoute()}/${id}/cancel`,\n            {method: 'post'},\n        );\n    };\n\n    // Admin Routes\n\n    getLogs = (page = 0, perPage = LOGS_PER_PAGE_DEFAULT) => {\n        return this.doFetch<string[]>(\n            `${this.getBaseRoute()}/logs${buildQueryString({page, logs_per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getAudits = (page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Audit[]>(\n            `${this.getBaseRoute()}/audits${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getConfig = () => {\n        return this.doFetch<AdminConfig>(\n            `${this.getBaseRoute()}/config`,\n            {method: 'get'},\n        );\n    };\n\n    updateConfig = (config: AdminConfig) => {\n        return this.doFetch<AdminConfig>(\n            `${this.getBaseRoute()}/config`,\n            {method: 'put', body: JSON.stringify(config)},\n        );\n    };\n\n    reloadConfig = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/config/reload`,\n            {method: 'post'},\n        );\n    };\n\n    getEnvironmentConfig = () => {\n        return this.doFetch<EnvironmentConfig>(\n            `${this.getBaseRoute()}/config/environment`,\n            {method: 'get'},\n        );\n    };\n\n    testEmail = (config: AdminConfig) => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/email/test`,\n            {method: 'post', body: JSON.stringify(config)},\n        );\n    };\n\n    testSiteURL = (siteURL: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/site_url/test`,\n            {method: 'post', body: JSON.stringify({site_url: siteURL})},\n        );\n    };\n\n    testS3Connection = (config: ClientConfig) => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/file/s3_test`,\n            {method: 'post', body: JSON.stringify(config)},\n        );\n    };\n\n    invalidateCaches = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/caches/invalidate`,\n            {method: 'post'},\n        );\n    };\n\n    recycleDatabase = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/database/recycle`,\n            {method: 'post'},\n        );\n    };\n\n    createComplianceReport = (job: Partial<Compliance>) => {\n        return this.doFetch<Compliance>(\n            `${this.getBaseRoute()}/compliance/reports`,\n            {method: 'post', body: JSON.stringify(job)},\n        );\n    };\n\n    getComplianceReport = (reportId: string) => {\n        return this.doFetch<Compliance>(\n            `${this.getBaseRoute()}/compliance/reports/${reportId}`,\n            {method: 'get'},\n        );\n    };\n\n    getComplianceReports = (page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Compliance[]>(\n            `${this.getBaseRoute()}/compliance/reports${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    uploadBrandImage = (imageData: File) => {\n        const formData = new FormData();\n        formData.append('image', imageData);\n        const request: any = {\n            method: 'post',\n            body: formData,\n        };\n\n        if (formData.getBoundary) {\n            request.headers = {\n                'Content-Type': `multipart/form-data; boundary=${formData.getBoundary()}`,\n            };\n        }\n\n        return this.doFetch<StatusOK>(\n            `${this.getBrandRoute()}/image`,\n            request,\n        );\n    };\n\n    deleteBrandImage = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBrandRoute()}/image`,\n            {method: 'delete'},\n        );\n    };\n\n    getClusterStatus = () => {\n        return this.doFetch<ClusterInfo[]>(\n            `${this.getBaseRoute()}/cluster/status`,\n            {method: 'get'},\n        );\n    };\n\n    testLdap = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/ldap/test`,\n            {method: 'post'},\n        );\n    };\n\n    syncLdap = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/ldap/sync`,\n            {method: 'post'},\n        );\n    };\n\n    getLdapGroups = (page = 0, perPage = PER_PAGE_DEFAULT, opts = {}) => {\n        const query = {page, per_page: perPage, ...opts};\n        return this.doFetch<{\n            count: number;\n            groups: MixedUnlinkedGroup[];\n        }>(\n            `${this.getBaseRoute()}/ldap/groups${buildQueryString(query)}`,\n            {method: 'get'},\n        );\n    };\n\n    linkLdapGroup = (key: string) => {\n        return this.doFetch<Group>(\n            `${this.getBaseRoute()}/ldap/groups/${encodeURI(key)}/link`,\n            {method: 'post'},\n        );\n    };\n\n    unlinkLdapGroup = (key: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/ldap/groups/${encodeURI(key)}/link`,\n            {method: 'delete'},\n        );\n    };\n\n    getSamlCertificateStatus = () => {\n        return this.doFetch<SamlCertificateStatus>(\n            `${this.getBaseRoute()}/saml/certificate/status`,\n            {method: 'get'},\n        );\n    };\n\n    uploadPublicSamlCertificate = (fileData: File) => {\n        const formData = new FormData();\n        formData.append('certificate', fileData);\n\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/saml/certificate/public`,\n            {\n                method: 'post',\n                body: formData,\n            },\n        );\n    };\n\n    uploadPrivateSamlCertificate = (fileData: File) => {\n        const formData = new FormData();\n        formData.append('certificate', fileData);\n\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/saml/certificate/private`,\n            {\n                method: 'post',\n                body: formData,\n            },\n        );\n    };\n\n    uploadPublicLdapCertificate = (fileData: File) => {\n        const formData = new FormData();\n        formData.append('certificate', fileData);\n\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/ldap/certificate/public`,\n            {\n                method: 'post',\n                body: formData,\n            },\n        );\n    };\n\n    uploadPrivateLdapCertificate = (fileData: File) => {\n        const formData = new FormData();\n        formData.append('certificate', fileData);\n\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/ldap/certificate/private`,\n            {\n                method: 'post',\n                body: formData,\n            },\n        );\n    };\n\n    uploadIdpSamlCertificate = (fileData: File) => {\n        const formData = new FormData();\n        formData.append('certificate', fileData);\n\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/saml/certificate/idp`,\n            {\n                method: 'post',\n                body: formData,\n            },\n        );\n    };\n\n    deletePublicSamlCertificate = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/saml/certificate/public`,\n            {method: 'delete'},\n        );\n    };\n\n    deletePrivateSamlCertificate = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/saml/certificate/private`,\n            {method: 'delete'},\n        );\n    };\n\n    deletePublicLdapCertificate = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/ldap/certificate/public`,\n            {method: 'delete'},\n        );\n    };\n\n    deletePrivateLdapCertificate = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/ldap/certificate/private`,\n            {method: 'delete'},\n        );\n    };\n\n    deleteIdpSamlCertificate = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/saml/certificate/idp`,\n            {method: 'delete'},\n        );\n    };\n\n    testElasticsearch = (config: ClientConfig) => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/elasticsearch/test`,\n            {method: 'post', body: JSON.stringify(config)},\n        );\n    };\n\n    purgeElasticsearchIndexes = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/elasticsearch/purge_indexes`,\n            {method: 'post'},\n        );\n    };\n\n    purgeBleveIndexes = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/bleve/purge_indexes`,\n            {method: 'post'},\n        );\n    };\n\n    uploadLicense = (fileData: File) => {\n        this.trackEvent('api', 'api_license_upload');\n\n        const formData = new FormData();\n        formData.append('license', fileData);\n\n        const request: any = {\n            method: 'post',\n            body: formData,\n        };\n\n        if (formData.getBoundary) {\n            request.headers = {\n                'Content-Type': `multipart/form-data; boundary=${formData.getBoundary()}`,\n            };\n        }\n\n        return this.doFetch<License>(\n            `${this.getBaseRoute()}/license`,\n            request,\n        );\n    };\n\n    removeLicense = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/license`,\n            {method: 'delete'},\n        );\n    };\n\n    getAnalytics = (name = 'standard', teamId = '') => {\n        return this.doFetch<AnalyticsRow[]>(\n            `${this.getBaseRoute()}/analytics/old${buildQueryString({name, team_id: teamId})}`,\n            {method: 'get'},\n        );\n    };\n\n    // Role Routes\n\n    getRole = (roleId: string) => {\n        return this.doFetch<Role>(\n            `${this.getRolesRoute()}/${roleId}`,\n            {method: 'get'},\n        );\n    };\n\n    getRoleByName = (roleName: string) => {\n        return this.doFetch<Role>(\n            `${this.getRolesRoute()}/name/${roleName}`,\n            {method: 'get'},\n        );\n    };\n\n    getRolesByNames = (rolesNames: string[]) => {\n        return this.doFetch<Role[]>(\n            `${this.getRolesRoute()}/names`,\n            {method: 'post', body: JSON.stringify(rolesNames)},\n        );\n    };\n\n    patchRole = (roleId: string, rolePatch: Partial<Role>) => {\n        return this.doFetch<Role>(\n            `${this.getRolesRoute()}/${roleId}/patch`,\n            {method: 'put', body: JSON.stringify(rolePatch)},\n        );\n    };\n\n    // Scheme Routes\n\n    getSchemes = (scope = '', page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Scheme[]>(\n            `${this.getSchemesRoute()}${buildQueryString({scope, page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    createScheme = (scheme: Scheme) => {\n        this.trackEvent('api', 'api_schemes_create');\n\n        return this.doFetch<Scheme>(\n            `${this.getSchemesRoute()}`,\n            {method: 'post', body: JSON.stringify(scheme)},\n        );\n    };\n\n    getScheme = (schemeId: string) => {\n        return this.doFetch<Scheme>(\n            `${this.getSchemesRoute()}/${schemeId}`,\n            {method: 'get'},\n        );\n    };\n\n    deleteScheme = (schemeId: string) => {\n        this.trackEvent('api', 'api_schemes_delete');\n\n        return this.doFetch<StatusOK>(\n            `${this.getSchemesRoute()}/${schemeId}`,\n            {method: 'delete'},\n        );\n    };\n\n    patchScheme = (schemeId: string, schemePatch: Partial<Scheme>) => {\n        this.trackEvent('api', 'api_schemes_patch', {scheme_id: schemeId});\n\n        return this.doFetch<Scheme>(\n            `${this.getSchemesRoute()}/${schemeId}/patch`,\n            {method: 'put', body: JSON.stringify(schemePatch)},\n        );\n    };\n\n    getSchemeTeams = (schemeId: string, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Team[]>(\n            `${this.getSchemesRoute()}/${schemeId}/teams${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getSchemeChannels = (schemeId: string, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Channel[]>(\n            `${this.getSchemesRoute()}/${schemeId}/channels${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    // Plugin Routes - EXPERIMENTAL - SUBJECT TO CHANGE\n\n    uploadPlugin = async (fileData: File, force = false) => {\n        this.trackEvent('api', 'api_plugin_upload');\n\n        const formData = new FormData();\n        if (force) {\n            formData.append('force', 'true');\n        }\n        formData.append('plugin', fileData);\n\n        const request: any = {\n            method: 'post',\n            body: formData,\n        };\n\n        if (formData.getBoundary) {\n            request.headers = {\n                'Content-Type': `multipart/form-data; boundary=${formData.getBoundary()}`,\n            };\n        }\n\n        return this.doFetch<PluginManifest>(\n            this.getPluginsRoute(),\n            request,\n        );\n    };\n\n    installPluginFromUrl = (pluginDownloadUrl: string, force = false) => {\n        this.trackEvent('api', 'api_install_plugin');\n\n        const queryParams = {plugin_download_url: pluginDownloadUrl, force};\n\n        return this.doFetch<PluginManifest>(\n            `${this.getPluginsRoute()}/install_from_url${buildQueryString(queryParams)}`,\n            {method: 'post'},\n        );\n    };\n\n    getPlugins = () => {\n        return this.doFetch<PluginsResponse>(\n            this.getPluginsRoute(),\n            {method: 'get'},\n        );\n    };\n\n    getMarketplacePlugins = (filter: string, localOnly = false) => {\n        return this.doFetch<MarketplacePlugin>(\n            `${this.getPluginsMarketplaceRoute()}${buildQueryString({filter: filter || '', local_only: localOnly})}`,\n            {method: 'get'},\n        );\n    }\n\n    installMarketplacePlugin = (id: string, version: string) => {\n        this.trackEvent('api', 'api_install_marketplace_plugin');\n\n        return this.doFetch<MarketplacePlugin>(\n            `${this.getPluginsMarketplaceRoute()}`,\n            {method: 'post', body: JSON.stringify({id, version})},\n        );\n    }\n\n    getPluginStatuses = () => {\n        return this.doFetch<PluginStatus[]>(\n            `${this.getPluginsRoute()}/statuses`,\n            {method: 'get'},\n        );\n    };\n\n    removePlugin = (pluginId: string) => {\n        return this.doFetch<StatusOK>(\n            this.getPluginRoute(pluginId),\n            {method: 'delete'},\n        );\n    };\n\n    getWebappPlugins = () => {\n        return this.doFetch<ClientPluginManifest[]>(\n            `${this.getPluginsRoute()}/webapp`,\n            {method: 'get'},\n        );\n    };\n\n    enablePlugin = (pluginId: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getPluginRoute(pluginId)}/enable`,\n            {method: 'post'},\n        );\n    };\n\n    disablePlugin = (pluginId: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getPluginRoute(pluginId)}/disable`,\n            {method: 'post'},\n        );\n    };\n\n    // Groups\n\n    linkGroupSyncable = (groupID: string, syncableID: string, syncableType: string, patch: SyncablePatch) => {\n        return this.doFetch<GroupSyncable>(\n            `${this.getGroupRoute(groupID)}/${syncableType}s/${syncableID}/link`,\n            {method: 'post', body: JSON.stringify(patch)},\n        );\n    };\n\n    unlinkGroupSyncable = (groupID: string, syncableID: string, syncableType: string) => {\n        return this.doFetch<StatusOK>(\n            `${this.getGroupRoute(groupID)}/${syncableType}s/${syncableID}/link`,\n            {method: 'delete'},\n        );\n    };\n\n    getGroupSyncables = (groupID: string, syncableType: string) => {\n        return this.doFetch<GroupSyncable[]>(\n            `${this.getGroupRoute(groupID)}/${syncableType}s`,\n            {method: 'get'},\n        );\n    };\n\n    getGroup = (groupID: string) => {\n        return this.doFetch<Group>(\n            this.getGroupRoute(groupID),\n            {method: 'get'},\n        );\n    };\n\n    getGroupStats = (groupID: string) => {\n        return this.doFetch<Group>(\n            `${this.getGroupRoute(groupID)}/stats`,\n            {method: 'get'},\n        );\n    };\n\n    getGroups = (filterAllowReference = false, page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Group[]>(\n            `${this.getGroupsRoute()}${buildQueryString({filter_allow_reference: filterAllowReference, page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    };\n\n    getGroupsByUserId = (userID: string) => {\n        return this.doFetch<Group[]>(\n            `${this.getUsersRoute()}/${userID}/groups`,\n            {method: 'get'},\n        );\n    };\n\n    getGroupsNotAssociatedToTeam = (teamID: string, q = '', page = 0, perPage = PER_PAGE_DEFAULT) => {\n        this.trackEvent('api', 'api_groups_get_not_associated_to_team', {team_id: teamID});\n        return this.doFetch<Group[]>(\n            `${this.getGroupsRoute()}${buildQueryString({not_associated_to_team: teamID, page, per_page: perPage, q, include_member_count: true})}`,\n            {method: 'get'},\n        );\n    };\n\n    getGroupsNotAssociatedToChannel = (channelID: string, q = '', page = 0, perPage = PER_PAGE_DEFAULT, filterParentTeamPermitted = false) => {\n        this.trackEvent('api', 'api_groups_get_not_associated_to_channel', {channel_id: channelID});\n        const query = {\n            not_associated_to_channel: channelID,\n            page,\n            per_page: perPage,\n            q,\n            include_member_count: true,\n            filter_parent_team_permitted: filterParentTeamPermitted,\n        };\n        return this.doFetch<Group[]>(\n            `${this.getGroupsRoute()}${buildQueryString(query)}`,\n            {method: 'get'},\n        );\n    };\n\n    getGroupsAssociatedToTeam = (teamID: string, q = '', page = 0, perPage = PER_PAGE_DEFAULT, filterAllowReference = false) => {\n        this.trackEvent('api', 'api_groups_get_associated_to_team', {team_id: teamID});\n\n        return this.doFetch<{\n            groups: Group[];\n            total_group_count: number;\n        }>(\n            `${this.getBaseRoute()}/teams/${teamID}/groups${buildQueryString({page, per_page: perPage, q, include_member_count: true, filter_allow_reference: filterAllowReference})}`,\n            {method: 'get'},\n        );\n    };\n\n    getGroupsAssociatedToChannel = (channelID: string, q = '', page = 0, perPage = PER_PAGE_DEFAULT, filterAllowReference = false) => {\n        this.trackEvent('api', 'api_groups_get_associated_to_channel', {channel_id: channelID});\n\n        return this.doFetch<{\n            groups: Group[];\n            total_group_count: number;\n        }>(\n            `${this.getBaseRoute()}/channels/${channelID}/groups${buildQueryString({page, per_page: perPage, q, include_member_count: true, filter_allow_reference: filterAllowReference})}`,\n            {method: 'get'},\n        );\n    };\n\n    getAllGroupsAssociatedToTeam = (teamID: string, filterAllowReference = false, includeMemberCount = false) => {\n        return this.doFetch<GroupsWithCount>(\n            `${this.getBaseRoute()}/teams/${teamID}/groups${buildQueryString({paginate: false, filter_allow_reference: filterAllowReference, include_member_count: includeMemberCount})}`,\n            {method: 'get'},\n        );\n    };\n\n    getAllGroupsAssociatedToChannelsInTeam = (teamID: string, filterAllowReference = false) => {\n        return this.doFetch<{\n            groups: RelationOneToOne<Channel, Group>;\n        }>(\n            `${this.getBaseRoute()}/teams/${teamID}/groups_by_channels${buildQueryString({paginate: false, filter_allow_reference: filterAllowReference})}`,\n            {method: 'get'},\n        );\n    };\n\n    getAllGroupsAssociatedToChannel = (channelID: string, filterAllowReference = false, includeMemberCount = false) => {\n        return this.doFetch<GroupsWithCount>(\n            `${this.getBaseRoute()}/channels/${channelID}/groups${buildQueryString({paginate: false, filter_allow_reference: filterAllowReference, include_member_count: includeMemberCount})}`,\n            {method: 'get'},\n        );\n    };\n\n    patchGroupSyncable = (groupID: string, syncableID: string, syncableType: string, patch: SyncablePatch) => {\n        return this.doFetch<GroupSyncable>(\n            `${this.getGroupRoute(groupID)}/${syncableType}s/${syncableID}/patch`,\n            {method: 'put', body: JSON.stringify(patch)},\n        );\n    };\n\n    patchGroup = (groupID: string, patch: GroupPatch) => {\n        return this.doFetch<Group>(\n            `${this.getGroupRoute(groupID)}/patch`,\n            {method: 'put', body: JSON.stringify(patch)},\n        );\n    };\n\n    // Redirect Location\n    getRedirectLocation = (urlParam: string) => {\n        if (!urlParam.length) {\n            return Promise.resolve();\n        }\n        const url = `${this.getRedirectLocationRoute()}${buildQueryString({url: urlParam})}`;\n        return this.doFetch<{\n            location: string;\n        }>(url, {method: 'get'});\n    };\n\n    // Bot Routes\n\n    createBot = (bot: Bot) => {\n        return this.doFetch<Bot>(\n            `${this.getBotsRoute()}`,\n            {method: 'post', body: JSON.stringify(bot)},\n        );\n    }\n\n    patchBot = (botUserId: string, botPatch: BotPatch) => {\n        return this.doFetch<Bot>(\n            `${this.getBotRoute(botUserId)}`,\n            {method: 'put', body: JSON.stringify(botPatch)},\n        );\n    }\n\n    getBot = (botUserId: string) => {\n        return this.doFetch<Bot>(\n            `${this.getBotRoute(botUserId)}`,\n            {method: 'get'},\n        );\n    }\n\n    getBots = (page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Bot[]>(\n            `${this.getBotsRoute()}${buildQueryString({page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    }\n\n    getBotsIncludeDeleted = (page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Bot[]>(\n            `${this.getBotsRoute()}${buildQueryString({include_deleted: true, page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    }\n\n    getBotsOrphaned = (page = 0, perPage = PER_PAGE_DEFAULT) => {\n        return this.doFetch<Bot[]>(\n            `${this.getBotsRoute()}${buildQueryString({only_orphaned: true, page, per_page: perPage})}`,\n            {method: 'get'},\n        );\n    }\n\n    disableBot = (botUserId: string) => {\n        return this.doFetch<Bot>(\n            `${this.getBotRoute(botUserId)}/disable`,\n            {method: 'post'},\n        );\n    }\n\n    enableBot = (botUserId: string) => {\n        return this.doFetch<Bot>(\n            `${this.getBotRoute(botUserId)}/enable`,\n            {method: 'post'},\n        );\n    }\n\n    assignBot = (botUserId: string, newOwnerId: string) => {\n        return this.doFetch<Bot>(\n            `${this.getBotRoute(botUserId)}/assign/${newOwnerId}`,\n            {method: 'post'},\n        );\n    }\n\n    // Cloud routes\n    getCloudProducts = () => {\n        return this.doFetch<Product[]>(\n            `${this.getCloudRoute()}/products`, {method: 'get'},\n        );\n    };\n\n    createPaymentMethod = async () => {\n        return this.doFetch(\n            `${this.getCloudRoute()}/payment`,\n            {method: 'post'},\n        );\n    }\n\n    getCloudCustomer = () => {\n        return this.doFetch<CloudCustomer>(\n            `${this.getCloudRoute()}/customer`, {method: 'get'},\n        );\n    }\n\n    updateCloudCustomer = (customerPatch: CloudCustomerPatch) => {\n        return this.doFetch<CloudCustomer>(\n            `${this.getCloudRoute()}/customer`,\n            {method: 'put', body: JSON.stringify(customerPatch)},\n        );\n    }\n\n    updateCloudCustomerAddress = (address: Address) => {\n        return this.doFetch<CloudCustomer>(\n            `${this.getCloudRoute()}/customer/address`,\n            {method: 'put', body: JSON.stringify(address)},\n        );\n    }\n\n    confirmPaymentMethod = async (stripeSetupIntentID: string) => {\n        return this.doFetch(\n            `${this.getCloudRoute()}/payment/confirm`,\n            {method: 'post', body: JSON.stringify({stripe_setup_intent_id: stripeSetupIntentID})},\n        );\n    }\n\n    getSubscription = () => {\n        return this.doFetch<Subscription>(\n            `${this.getCloudRoute()}/subscription`,\n            {method: 'get'},\n        );\n    }\n\n    getSubscriptionStats = () => {\n        return this.doFetch<SubscriptionStats>(\n            `${this.getCloudRoute()}/subscription/stats`,\n            {method: 'get'},\n        );\n    }\n\n    getRenewalLink = () => {\n        return this.doFetch<{renewal_link: string}>(\n            `${this.getBaseRoute()}/license/renewal`,\n            {method: 'get'},\n        );\n    }\n\n    getInvoices = () => {\n        return this.doFetch<Invoice[]>(\n            `${this.getCloudRoute()}/subscription/invoices`,\n            {method: 'get'},\n        );\n    }\n\n    getInvoicePdfUrl = (invoiceId: string) => {\n        return `${this.getCloudRoute()}/subscription/invoices/${invoiceId}/pdf`;\n    }\n\n    teamMembersMinusGroupMembers = (teamID: string, groupIDs: string[], page: number, perPage: number) => {\n        const query = `group_ids=${groupIDs.join(',')}&page=${page}&per_page=${perPage}`;\n        return this.doFetch<UsersWithGroupsAndCount>(\n            `${this.getTeamRoute(teamID)}/members_minus_group_members?${query}`,\n            {method: 'get'},\n        );\n    }\n\n    channelMembersMinusGroupMembers = (channelID: string, groupIDs: string[], page: number, perPage: number) => {\n        const query = `group_ids=${groupIDs.join(',')}&page=${page}&per_page=${perPage}`;\n        return this.doFetch<UsersWithGroupsAndCount>(\n            `${this.getChannelRoute(channelID)}/members_minus_group_members?${query}`,\n            {method: 'get'},\n        );\n    }\n\n    getSamlMetadataFromIdp = (samlMetadataURL: string) => {\n        return this.doFetch<SamlMetadataResponse>(\n            `${this.getBaseRoute()}/saml/metadatafromidp`, {method: 'post', body: JSON.stringify({saml_metadata_url: samlMetadataURL})},\n        );\n    };\n\n    setSamlIdpCertificateFromMetadata = (certData: string) => {\n        const request: any = {\n            method: 'post',\n            body: certData,\n        };\n\n        request.headers = {\n            'Content-Type': 'application/x-pem-file',\n        };\n\n        return this.doFetch<StatusOK>(\n            `${this.getBaseRoute()}/saml/certificate/idp`,\n            request,\n        );\n    };\n\n    getInProductNotices = (teamId: string, client: string, clientVersion: string) => {\n        return this.doFetch<ProductNotices>(\n            `${this.getNoticesRoute()}/${teamId}?client=${client}&clientVersion=${clientVersion}`,\n            {method: 'get'},\n        );\n    };\n\n    updateNoticesAsViewed = (noticeIds: string[]) => {\n        // Only one notice is marked as viewed at a time so using 0 index\n        this.trackEvent('ui', `notice_seen_${noticeIds[0]}`);\n        return this.doFetch<StatusOK>(\n            `${this.getNoticesRoute()}/view`,\n            {method: 'put', body: JSON.stringify(noticeIds)},\n        );\n    }\n\n    sendAdminUpgradeRequestEmail = () => {\n        return this.doFetch<StatusOK>(\n            `${this.getCloudRoute()}/subscription/limitreached/invite`,\n            {method: 'post'},\n        );\n    }\n\n    // Client Helpers\n\n    doFetch = async <T>(url: string, options: Options): Promise<T> => {\n        const {data} = await this.doFetchWithResponse<T>(url, options);\n\n        return data;\n    };\n\n    doFetchWithResponse = async <T>(url: string, options: Options): Promise<ClientResponse<T>> => {\n        const response = await fetch(url, this.getOptions(options));\n        const headers = parseAndMergeNestedHeaders(response.headers);\n\n        let data;\n        try {\n            data = await response.json();\n        } catch (err) {\n            throw new ClientError(this.getUrl(), {\n                message: 'Received invalid response from the server.',\n                intl: {\n                    id: 'mobile.request.invalid_response',\n                    defaultMessage: 'Received invalid response from the server.',\n                },\n                url,\n            });\n        }\n\n        if (headers.has(HEADER_X_VERSION_ID) && !headers.get('Cache-Control')) {\n            const serverVersion = headers.get(HEADER_X_VERSION_ID);\n            if (serverVersion && this.serverVersion !== serverVersion) {\n                this.serverVersion = serverVersion;\n            }\n        }\n\n        if (headers.has(HEADER_X_CLUSTER_ID)) {\n            const clusterId = headers.get(HEADER_X_CLUSTER_ID);\n            if (clusterId && this.clusterId !== clusterId) {\n                this.clusterId = clusterId;\n            }\n        }\n\n        if (response.ok) {\n            return {\n                response,\n                headers,\n                data,\n            };\n        }\n\n        const msg = data.message || '';\n\n        if (this.logToConsole) {\n            console.error(msg); // eslint-disable-line no-console\n        }\n\n        throw new ClientError(this.getUrl(), {\n            message: msg,\n            server_error_id: data.id,\n            status_code: data.status_code,\n            url,\n        });\n    };\n\n    trackEvent(category: string, event: string, props?: any) {\n        if (this.telemetryHandler) {\n            const userRoles = this.userRoles && isSystemAdmin(this.userRoles) ? 'system_admin, system_user' : 'system_user';\n            this.telemetryHandler.trackEvent(this.userId, userRoles, category, event, props);\n        }\n    }\n\n    pageVisited(category: string, name: string) {\n        if (this.telemetryHandler) {\n            const userRoles = this.userRoles && isSystemAdmin(this.userRoles) ? 'system_admin, system_user' : 'system_user';\n            this.telemetryHandler.pageVisited(this.userId, userRoles, category, name);\n        }\n    }\n}\n\nfunction parseAndMergeNestedHeaders(originalHeaders: any) {\n    const headers = new Map();\n    let nestedHeaders = new Map();\n    originalHeaders.forEach((val: string, key: string) => {\n        const capitalizedKey = key.replace(/\\b[a-z]/g, (l) => l.toUpperCase());\n        let realVal = val;\n        if (val && val.match(/\\n\\S+:\\s\\S+/)) {\n            const nestedHeaderStrings = val.split('\\n');\n            realVal = nestedHeaderStrings.shift() as string;\n            const moreNestedHeaders = new Map(\n                nestedHeaderStrings.map((h: any) => h.split(/:\\s/)),\n            );\n            nestedHeaders = new Map([...nestedHeaders, ...moreNestedHeaders]);\n        }\n        headers.set(capitalizedKey, realVal);\n    });\n    return new Map([...headers, ...nestedHeaders]);\n}\n\nexport class ClientError extends Error implements ServerError {\n    url?: string;\n    intl?: {\n        id: string;\n        defaultMessage: string;\n        values?: any;\n    };\n    server_error_id?: string;\n    status_code?: number;\n\n    constructor(baseUrl: string, data: ServerError) {\n        super(data.message + ': ' + cleanUrlForLogging(baseUrl, data.url || ''));\n\n        this.message = data.message;\n        this.url = data.url;\n        this.intl = data.intl;\n        this.server_error_id = data.server_error_id;\n        this.status_code = data.status_code;\n\n        // Ensure message is treated as a property of this class when object spreading. Without this,\n        // copying the object by using `{...error}` would not include the message.\n        Object.defineProperty(this, 'message', {enumerable: true});\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n// Given a URL from an API request, return a URL that has any parts removed that are either sensitive or that would\n// prevent properly grouping the messages in Sentry.\nexport function cleanUrlForLogging(baseUrl: string, apiUrl: string): string {\n    let url = apiUrl;\n\n    // Trim the host name\n    url = url.substring(baseUrl.length);\n\n    // Filter the query string\n    const index = url.indexOf('?');\n    if (index !== -1) {\n        url = url.substring(0, index);\n    }\n\n    // A non-exhaustive whitelist to exclude parts of the URL that are unimportant (eg IDs) or may be sentsitive\n    // (eg email addresses). We prefer filtering out fields that aren't recognized because there should generally\n    // be enough left over for debugging.\n    //\n    // Note that new API routes don't need to be added here since this shouldn't be happening for newly added routes.\n    const whitelist = [\n        'api', 'v4', 'users', 'teams', 'scheme', 'name', 'members', 'channels', 'posts', 'reactions', 'commands',\n        'files', 'preferences', 'hooks', 'incoming', 'outgoing', 'oauth', 'apps', 'emoji', 'brand', 'image',\n        'data_retention', 'jobs', 'plugins', 'roles', 'system', 'timezones', 'schemes', 'redirect_location', 'patch',\n        'mfa', 'password', 'reset', 'send', 'active', 'verify', 'terms_of_service', 'login', 'logout', 'ids',\n        'usernames', 'me', 'username', 'email', 'default', 'sessions', 'revoke', 'all', 'audits', 'device', 'status',\n        'search', 'switch', 'authorized', 'authorize', 'deauthorize', 'tokens', 'disable', 'enable', 'exists', 'unread',\n        'invite', 'batch', 'stats', 'import', 'schemeRoles', 'direct', 'group', 'convert', 'view', 'search_autocomplete',\n        'thread', 'info', 'flagged', 'pinned', 'pin', 'unpin', 'opengraph', 'actions', 'thumbnail', 'preview', 'link',\n        'delete', 'logs', 'ping', 'config', 'client', 'license', 'websocket', 'webrtc', 'token', 'regen_token',\n        'autocomplete', 'execute', 'regen_secret', 'policy', 'type', 'cancel', 'reload', 'environment', 's3_test', 'file',\n        'caches', 'invalidate', 'database', 'recycle', 'compliance', 'reports', 'cluster', 'ldap', 'test', 'sync', 'saml',\n        'certificate', 'public', 'private', 'idp', 'elasticsearch', 'purge_indexes', 'analytics', 'old', 'webapp', 'fake',\n    ];\n\n    url = url.split('/').map((part) => {\n        if (part !== '' && whitelist.indexOf(part) === -1) {\n            return '<filtered>';\n        }\n\n        return part;\n    }).join('/');\n\n    if (index !== -1) {\n        // Add this on afterwards since it wouldn't pass the whitelist\n        url += '?<filtered>';\n    }\n\n    return url;\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__assign","assign","t","s","i","n","arguments","length","apply","this","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","r","ar","error","__spread","concat","obj","isArray","Error","ret","key","keyMirror","TOTAL_USERS","TOTAL_INACTIVE_USERS","TOTAL_PUBLIC_CHANNELS","TOTAL_PRIVATE_GROUPS","TOTAL_POSTS","TOTAL_TEAMS","TOTAL_FILE_POSTS","TOTAL_HASHTAG_POSTS","TOTAL_IHOOKS","TOTAL_OHOOKS","TOTAL_COMMANDS","TOTAL_SESSIONS","POST_PER_DAY","BOT_POST_PER_DAY","USERS_WITH_POSTS_PER_DAY","RECENTLY_ACTIVE_USERS","NEWLY_CREATED_USERS","TOTAL_WEBSOCKET_CONNECTIONS","TOTAL_MASTER_DB_CONNECTIONS","TOTAL_READ_DB_CONNECTIONS","DAILY_ACTIVE_USERS","MONTHLY_ACTIVE_USERS","REGISTERED_USERS","Groups","values","INVITE_USER","ADD_USER_TO_TEAM","USE_SLASH_COMMANDS","MANAGE_SLASH_COMMANDS","MANAGE_OTHERS_SLASH_COMMANDS","CREATE_PUBLIC_CHANNEL","CREATE_PRIVATE_CHANNEL","MANAGE_PUBLIC_CHANNEL_MEMBERS","MANAGE_PRIVATE_CHANNEL_MEMBERS","READ_PUBLIC_CHANNEL_GROUPS","READ_PRIVATE_CHANNEL_GROUPS","ASSIGN_SYSTEM_ADMIN_ROLE","MANAGE_ROLES","MANAGE_TEAM_ROLES","MANAGE_CHANNEL_ROLES","MANAGE_SYSTEM","CREATE_DIRECT_CHANNEL","CREATE_GROUP_CHANNEL","MANAGE_PUBLIC_CHANNEL_PROPERTIES","MANAGE_PRIVATE_CHANNEL_PROPERTIES","LIST_PUBLIC_TEAMS","JOIN_PUBLIC_TEAMS","LIST_PRIVATE_TEAMS","JOIN_PRIVATE_TEAMS","LIST_TEAM_CHANNELS","JOIN_PUBLIC_CHANNELS","DELETE_PUBLIC_CHANNEL","CONVERT_PUBLIC_CHANNEL_TO_PRIVATE","CONVERT_PRIVATE_CHANNEL_TO_PUBLIC","DELETE_PRIVATE_CHANNEL","EDIT_OTHER_USERS","READ_CHANNEL","READ_PUBLIC_CHANNEL","ADD_REACTION","REMOVE_REACTION","REMOVE_OTHERS_REACTIONS","PERMANENT_DELETE_USER","UPLOAD_FILE","GET_PUBLIC_LINK","MANAGE_WEBHOOKS","MANAGE_OTHERS_WEBHOOKS","MANAGE_INCOMING_WEBHOOKS","MANAGE_OTHERS_INCOMING_WEBHOOKS","MANAGE_OUTGOING_WEBHOOKS","MANAGE_OTHERS_OUTGOING_WEBHOOKS","MANAGE_OAUTH","MANAGE_SYSTEM_WIDE_OAUTH","CREATE_POST","CREATE_POST_PUBLIC","EDIT_POST","EDIT_OTHERS_POSTS","DELETE_POST","DELETE_OTHERS_POSTS","REMOVE_USER_FROM_TEAM","CREATE_TEAM","MANAGE_TEAM","IMPORT_TEAM","VIEW_TEAM","LIST_USERS_WITHOUT_TEAM","CREATE_USER_ACCESS_TOKEN","READ_USER_ACCESS_TOKEN","REVOKE_USER_ACCESS_TOKEN","MANAGE_JOBS","MANAGE_EMOJIS","MANAGE_OTHERS_EMOJIS","CREATE_EMOJIS","DELETE_EMOJIS","DELETE_OTHERS_EMOJIS","VIEW_MEMBERS","INVITE_GUEST","PROMOTE_GUEST","DEMOTE_TO_GUEST","USE_CHANNEL_MENTIONS","USE_GROUP_MENTIONS","READ_OTHER_USERS_TEAMS","EDIT_BRAND","READ_JOBS","DOWNLOAD_COMPLIANCE_EXPORT_RESULT","SYSCONSOLE_READ_ABOUT","SYSCONSOLE_WRITE_ABOUT","SYSCONSOLE_READ_BILLING","SYSCONSOLE_WRITE_BILLING","SYSCONSOLE_READ_REPORTING","SYSCONSOLE_WRITE_REPORTING","SYSCONSOLE_READ_USERMANAGEMENT_USERS","SYSCONSOLE_WRITE_USERMANAGEMENT_USERS","SYSCONSOLE_READ_USERMANAGEMENT_GROUPS","SYSCONSOLE_WRITE_USERMANAGEMENT_GROUPS","SYSCONSOLE_READ_USERMANAGEMENT_TEAMS","SYSCONSOLE_WRITE_USERMANAGEMENT_TEAMS","SYSCONSOLE_READ_USERMANAGEMENT_CHANNELS","SYSCONSOLE_WRITE_USERMANAGEMENT_CHANNELS","SYSCONSOLE_READ_USERMANAGEMENT_PERMISSIONS","SYSCONSOLE_WRITE_USERMANAGEMENT_PERMISSIONS","SYSCONSOLE_READ_USERMANAGEMENT_SYSTEM_ROLES","SYSCONSOLE_WRITE_USERMANAGEMENT_SYSTEM_ROLES","SYSCONSOLE_READ_ENVIRONMENT","SYSCONSOLE_WRITE_ENVIRONMENT","SYSCONSOLE_READ_SITE","SYSCONSOLE_WRITE_SITE","SYSCONSOLE_READ_AUTHENTICATION","SYSCONSOLE_WRITE_AUTHENTICATION","SYSCONSOLE_READ_PLUGINS","SYSCONSOLE_WRITE_PLUGINS","SYSCONSOLE_READ_INTEGRATIONS","SYSCONSOLE_WRITE_INTEGRATIONS","SYSCONSOLE_READ_COMPLIANCE","SYSCONSOLE_WRITE_COMPLIANCE","SYSCONSOLE_READ_EXPERIMENTAL","SYSCONSOLE_WRITE_EXPERIMENTAL","CHANNEL_MODERATED_PERMISSIONS","CREATE_REACTIONS","MANAGE_MEMBERS","MANAGE_BOTS","MANAGE_OTHERS_BOTS","SYSCONSOLE_READ_PERMISSIONS","SYSCONSOLE_WRITE_PERMISSIONS","MANAGE_SHARED_CHANNELS","MANAGE_REMOTE_CLUSTERS","SYSCONSOLE_ANCILLARY_PERMISSIONS","defaultEqualityCheck","a","areArgumentsShallowlyEqual","equalityCheck","prev","defaultMemoize","func","undefined","lastArgs","lastResult","getDependencies","funcs","dependencies","every","dep","dependencyTypes","map","join","createSelectorCreator","memoize","_len","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","memoizedResultFunc","selector","params","resetRecomputations","_a","compare","aIsArray","bIsArray","aTypeof","type","flat","l","shallowArray","ka","kb","shallowObject","reselect.createSelectorCreator","shallowEqual","Reflect","reselect.defaultMemoize","buildQueryString","parameters","keys","query","encodeURIComponent","isSystemAdmin","roles","item","General","split","includes","data","etags","url","options","headers","method","etag","cachedResponse_1","fetch","response","status","clone","responseEtag","get","FormData","require","connectionError","unknownError","user","token","inviteId","redirect","_this","trackEvent","queryParams","iid","doFetch","getUsersRoute","JSON","stringify","userPatch","getUserRoute","id","userId","activate","code","currentPassword","newPassword","current_password","new_password","email","active","imageData","formData","append","request","getBoundary","Content-Type","termsOfServiceId","accepted","getBaseRoute","text","loginId","password","deviceId","ldapOnly","device_id","login_id","ldap_only","doFetchWithResponse","ok","serverVersion","page","perPage","per_page","userIds","usernames","teamId","sort","team_id","in_team","groupConstrained","group_constrained","queryStringObj","not_in_team","without_team","channelId","channel_id","currentVersion","minMajorVersion","minMinorVersion","minDotVersion","major","parseInt","minor","dot","isMinimumServerVersion","getServerVersion","in_channel","channelsIds","not_in_channel","groupId","in_group","username","lastPictureUpdate","name","limit","sessionId","session_id","term","user_id","customStatus","service","mfaCode","current_service","new_service","mfa_code","currentService","emailPassword","ldapId","ldapPassword","ldap_id","responseType","clientId","redirectUri","state","scope","client_id","response_type","redirect_uri","description","tokenId","token_id","team","getTeamsRoute","getTeamRoute","schemeId","patch","scheme_id","getTeamSchemeRoute","teamName","getTeamNameRoute","includeTotalCount","include_total_count","opts","getTeamMembersRoute","getTeamMemberRoute","member","invite_id","count","members","forEach","emails","channelIds","message","channel_ids","channels","file","importFrom","size","lastTeamIconUpdate","isSchemeUser","isSchemeAdmin","scheme_user","scheme_admin","notAssociatedToGroup","excludeDefaultChannels","includeDeleted","queryData","not_associated_to_group","exclude_default_channels","include_deleted","getChannelsRoute","channel","getChannelRoute","privacy","channelPatch","props","getChannelMemberRoute","getChannelSchemeRoute","channelName","getChannelMembersRoute","postRootId","post_root_id","channelModerationsPatch","includeTimezones","prevChannelId","prev_channel_id","Boolean","getChannelCategoriesRoute","category","categories","categoryOrder","categoryId","post","getPostsRoute","analyticsData","post_id","user_actual_id","root_id","getPostRoute","postId","postPatch","fetchThreads","collapsedThreads","collapsedThreadsExtended","skipFetchThreads","limitAfter","limitBefore","limit_after","limit_before","since","before","after","_b","_c","_d","pageSize","_e","extended","_f","deleted","_g","unread","_h","getUserThreadsRoute","threadId","getUserThreadRoute","timestamp","emojiName","getReactionsRoute","emoji_name","terms","isOrSearch","searchPostsWithParams","is_or_search","actionId","selectedOption","doPostActionWithCookie","actionCookie","msg","selected_option","cookie","fileFormData","formBoundary","getFilesRoute","fileId","getFileRoute","preferences","getPreferencesRoute","Date","now","level","enableLogging","ClientError","getUrl","warnMetricId","forceAckVal","encodeURI","forceAck","hook","getIncomingHooksRoute","hookId","getIncomingHookRoute","getOutgoingHooksRoute","getOutgoingHookRoute","getCommandsRoute","userInput","commandArgs","user_input","command","app","getOAuthAppsRoute","appId","getOAuthAppRoute","emoji","getEmojisRoute","emojiId","getEmojiRoute","filename","getTimezonesRoute","getDataRetentionRoute","getJobsRoute","job","logs_per_page","config","siteURL","site_url","reportId","getBrandRoute","fileData","roleId","getRolesRoute","roleName","rolesNames","rolePatch","getSchemesRoute","scheme","schemePatch","force","getPluginsRoute","pluginDownloadUrl","plugin_download_url","filter","localOnly","getPluginsMarketplaceRoute","local_only","version","pluginId","getPluginRoute","groupID","syncableID","syncableType","getGroupRoute","filterAllowReference","getGroupsRoute","filter_allow_reference","userID","teamID","q","not_associated_to_team","include_member_count","channelID","filterParentTeamPermitted","not_associated_to_channel","filter_parent_team_permitted","includeMemberCount","paginate","urlParam","getRedirectLocationRoute","bot","getBotsRoute","botUserId","botPatch","getBotRoute","only_orphaned","newOwnerId","getCloudRoute","customerPatch","address","stripeSetupIntentID","stripe_setup_intent_id","invoiceId","groupIDs","samlMetadataURL","saml_metadata_url","certData","client","clientVersion","getNoticesRoute","noticeIds","getOptions","originalHeaders","Map","nestedHeaders","val","capitalizedKey","replace","toUpperCase","realVal","match","nestedHeaderStrings","shift","moreNestedHeaders","h","set","parseAndMergeNestedHeaders","json","intl","defaultMessage","has","clusterId","logToConsole","console","server_error_id","status_code","Client4","baseUrl","startsWith","userAgent","csrfToken","csrf","locale","defaultHeaders","enable","include","includeCookies","userRoles","diagnosticId","telemetryHandler","urlVersion","document","cookies","trim","newOptions","HEADER_BEARER","getCSRFFromCookie","toLowerCase","credentials","event","pageVisited","_super","apiUrl","index","substring","indexOf","whitelist","part","cleanUrlForLogging","defineProperty","enumerable","String","__","constructor","create","__extends"],"mappings":"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"}