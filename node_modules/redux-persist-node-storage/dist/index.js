"use strict";
var node_localstorage_1 = require('node-localstorage');
var AsyncNodeStorage = (function () {
    function AsyncNodeStorage(storageDirectory) {
        this.localStorage = new node_localstorage_1.LocalStorage(storageDirectory);
    }
    AsyncNodeStorage.prototype.getItem = function (key) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                var storedValue_1 = _this.localStorage.getItem(key);
                process.nextTick(function () { return resolve(storedValue_1); });
            }
            catch (e) {
                reject(e);
            }
        });
    };
    AsyncNodeStorage.prototype.setItem = function (key, value) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                _this.localStorage.setItem(key, value);
                process.nextTick(function () { return resolve(); });
            }
            catch (e) {
                reject(e);
            }
        });
    };
    AsyncNodeStorage.prototype.removeItem = function (key) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                _this.localStorage.removeItem(key);
                process.nextTick(function () { return resolve(); });
            }
            catch (e) {
                reject(e);
            }
        });
    };
    AsyncNodeStorage.prototype.getAllKeys = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                var keys_1 = [];
                for (var i = 0; i < _this.localStorage.length; i++) {
                    keys_1.push(_this.localStorage.key(i));
                }
                process.nextTick(function () { return resolve(keys_1); });
            }
            catch (e) {
                reject(e);
            }
        });
    };
    return AsyncNodeStorage;
}());
exports.AsyncNodeStorage = AsyncNodeStorage;
